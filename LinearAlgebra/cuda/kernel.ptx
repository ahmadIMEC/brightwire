//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19805474
// Cuda compilation tools, release 7.5, V7.5.16
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_35
.address_size 64

	// .weak	cudaMalloc
// PointwiseMultiply$__cuda_local_var_258208_32_non_const_blockA has been demoted
// PointwiseDivide$__cuda_local_var_258223_32_non_const_blockA has been demoted
// Sqrt$__cuda_local_var_258238_32_non_const_blockA has been demoted
// AddInPlace$__cuda_local_var_258254_32_non_const_blockB has been demoted
// SubtractInPlace$__cuda_local_var_258269_32_non_const_blockB has been demoted
// Transpose$__cuda_local_var_258284_32_non_const_block has been demoted
// FindMinAndMax$__cuda_local_var_258477_32_non_const_block has been demoted
// FindSum$__cuda_local_var_258506_32_non_const_block has been demoted
// FindStdDev$__cuda_local_var_258531_32_non_const_block has been demoted

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z8_Pow_intIfET_S0_i
.visible .func  (.param .b32 func_retval0) _Z8_Pow_intIfET_S0_i(
	.param .b32 _Z8_Pow_intIfET_S0_i_param_0,
	.param .b32 _Z8_Pow_intIfET_S0_i_param_1
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<13>;
	.reg .b32 	%r<12>;


	ld.param.f32 	%f11, [_Z8_Pow_intIfET_S0_i_param_0];
	ld.param.u32 	%r4, [_Z8_Pow_intIfET_S0_i_param_1];
	shr.s32 	%r5, %r4, 31;
	add.s32 	%r6, %r4, %r5;
	xor.b32  	%r7, %r6, %r5;
	and.b32  	%r8, %r6, 1;
	setp.eq.b32	%p1, %r8, 1;
	and.b32  	%r9, %r5, 1;
	setp.eq.b32	%p2, %r9, 1;
	xor.pred  	%p3, %p1, %p2;
	not.pred 	%p4, %p3;
	selp.f32	%f12, 0f3F800000, %f11, %p4;
	shr.u32 	%r11, %r7, 1;
	setp.eq.s32	%p5, %r11, 0;
	@%p5 bra 	BB6_2;

BB6_1:
	and.b32  	%r10, %r11, 1;
	setp.eq.b32	%p6, %r10, 1;
	not.pred 	%p7, %p6;
	mul.ftz.f32 	%f11, %f11, %f11;
	mul.ftz.f32 	%f10, %f12, %f11;
	selp.f32	%f12, %f12, %f10, %p7;
	shr.u32 	%r11, %r11, 1;
	setp.ne.s32	%p8, %r11, 0;
	@%p8 bra 	BB6_1;

BB6_2:
	setp.gt.s32	%p9, %r4, -1;
	@%p9 bra 	BB6_4;

	rcp.approx.ftz.f32 	%f12, %f12;

BB6_4:
	st.param.f32	[func_retval0+0], %f12;
	ret;
}

	// .globl	PointwiseMultiply
.visible .entry PointwiseMultiply(
	.param .u64 PointwiseMultiply_param_0,
	.param .u64 PointwiseMultiply_param_1,
	.param .u32 PointwiseMultiply_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 PointwiseMultiply$__cuda_local_var_258208_32_non_const_blockA[4096];

	ld.param.u64 	%rd2, [PointwiseMultiply_param_0];
	ld.param.u64 	%rd3, [PointwiseMultiply_param_1];
	ld.param.u32 	%r2, [PointwiseMultiply_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, PointwiseMultiply$__cuda_local_var_258208_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB7_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB7_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB7_4;
	bra.uni 	BB7_3;

BB7_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f3, [%rd11];
	mul.ftz.f32 	%f4, %f2, %f3;
	st.global.f32 	[%rd11], %f4;

BB7_4:
	ret;
}

	// .globl	PointwiseDivide
.visible .entry PointwiseDivide(
	.param .u64 PointwiseDivide_param_0,
	.param .u64 PointwiseDivide_param_1,
	.param .u32 PointwiseDivide_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 PointwiseDivide$__cuda_local_var_258223_32_non_const_blockA[4096];

	ld.param.u64 	%rd2, [PointwiseDivide_param_0];
	ld.param.u64 	%rd3, [PointwiseDivide_param_1];
	ld.param.u32 	%r2, [PointwiseDivide_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, PointwiseDivide$__cuda_local_var_258223_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB8_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB8_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB8_4;
	bra.uni 	BB8_3;

BB8_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f3, [%rd11];
	div.approx.ftz.f32 	%f4, %f2, %f3;
	st.global.f32 	[%rd11], %f4;

BB8_4:
	ret;
}

	// .globl	Sqrt
.visible .entry Sqrt(
	.param .u64 Sqrt_param_0,
	.param .u64 Sqrt_param_1,
	.param .u32 Sqrt_param_2,
	.param .f32 Sqrt_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 Sqrt$__cuda_local_var_258238_32_non_const_blockA[4096];

	ld.param.u64 	%rd2, [Sqrt_param_0];
	ld.param.u64 	%rd3, [Sqrt_param_1];
	ld.param.u32 	%r2, [Sqrt_param_2];
	ld.param.f32 	%f1, [Sqrt_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, Sqrt$__cuda_local_var_258238_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB9_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f2, [%rd8];
	st.shared.f32 	[%rd1], %f2;

BB9_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB9_4;
	bra.uni 	BB9_3;

BB9_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f3, [%rd1];
	add.ftz.f32 	%f4, %f3, %f1;
	sqrt.approx.ftz.f32 	%f5, %f4;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f5;

BB9_4:
	ret;
}

	// .globl	AddInPlace
.visible .entry AddInPlace(
	.param .u64 AddInPlace_param_0,
	.param .u64 AddInPlace_param_1,
	.param .u32 AddInPlace_param_2,
	.param .f32 AddInPlace_param_3,
	.param .f32 AddInPlace_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 AddInPlace$__cuda_local_var_258254_32_non_const_blockB[4096];

	ld.param.u64 	%rd2, [AddInPlace_param_0];
	ld.param.u64 	%rd3, [AddInPlace_param_1];
	ld.param.u32 	%r2, [AddInPlace_param_2];
	ld.param.f32 	%f1, [AddInPlace_param_3];
	ld.param.f32 	%f2, [AddInPlace_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, AddInPlace$__cuda_local_var_258254_32_non_const_blockB;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB10_2;

	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f3, [%rd8];
	st.shared.f32 	[%rd1], %f3;

BB10_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB10_4;
	bra.uni 	BB10_3;

BB10_3:
	cvta.to.global.u64 	%rd9, %rd2;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f4, [%rd11];
	ld.shared.f32 	%f5, [%rd1];
	mul.ftz.f32 	%f6, %f5, %f2;
	fma.rn.ftz.f32 	%f7, %f4, %f1, %f6;
	st.global.f32 	[%rd11], %f7;

BB10_4:
	ret;
}

	// .globl	SubtractInPlace
.visible .entry SubtractInPlace(
	.param .u64 SubtractInPlace_param_0,
	.param .u64 SubtractInPlace_param_1,
	.param .u32 SubtractInPlace_param_2,
	.param .f32 SubtractInPlace_param_3,
	.param .f32 SubtractInPlace_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 SubtractInPlace$__cuda_local_var_258269_32_non_const_blockB[4096];

	ld.param.u64 	%rd2, [SubtractInPlace_param_0];
	ld.param.u64 	%rd3, [SubtractInPlace_param_1];
	ld.param.u32 	%r2, [SubtractInPlace_param_2];
	ld.param.f32 	%f1, [SubtractInPlace_param_3];
	ld.param.f32 	%f2, [SubtractInPlace_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, SubtractInPlace$__cuda_local_var_258269_32_non_const_blockB;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB11_2;

	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f3, [%rd8];
	st.shared.f32 	[%rd1], %f3;

BB11_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB11_4;
	bra.uni 	BB11_3;

BB11_3:
	cvta.to.global.u64 	%rd9, %rd2;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f4, [%rd11];
	mul.ftz.f32 	%f5, %f4, %f1;
	ld.shared.f32 	%f6, [%rd1];
	mul.ftz.f32 	%f7, %f6, %f2;
	sub.ftz.f32 	%f8, %f5, %f7;
	st.global.f32 	[%rd11], %f8;

BB11_4:
	ret;
}

	// .globl	Transpose
.visible .entry Transpose(
	.param .u64 Transpose_param_0,
	.param .u64 Transpose_param_1,
	.param .u32 Transpose_param_2,
	.param .u32 Transpose_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<19>;
	// demoted variable
	.shared .align 4 .b8 Transpose$__cuda_local_var_258284_32_non_const_block[4224];

	ld.param.u64 	%rd1, [Transpose_param_0];
	ld.param.u64 	%rd2, [Transpose_param_1];
	ld.param.u32 	%r9, [Transpose_param_2];
	ld.param.u32 	%r10, [Transpose_param_3];
	mov.u32 	%r11, %ctaid.x;
	shl.b32 	%r1, %r11, 5;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r3, %r1, %r2;
	mov.u32 	%r12, %ctaid.y;
	shl.b32 	%r4, %r12, 5;
	mov.u32 	%r5, %tid.y;
	add.s32 	%r6, %r4, %r5;
	setp.lt.s32	%p1, %r3, %r9;
	setp.lt.s32	%p2, %r6, %r10;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB12_2;
	bra.uni 	BB12_1;

BB12_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r13, %r6, %r9, %r3;
	mul.wide.s32 	%rd4, %r13, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mul.wide.u32 	%rd6, %r5, 132;
	mov.u64 	%rd7, Transpose$__cuda_local_var_258284_32_non_const_block;
	add.s64 	%rd8, %rd7, %rd6;
	mul.wide.u32 	%rd9, %r2, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.shared.f32 	[%rd10], %f1;

BB12_2:
	bar.sync 	0;
	add.s32 	%r7, %r4, %r2;
	setp.lt.s32	%p4, %r7, %r10;
	add.s32 	%r8, %r5, %r1;
	setp.lt.s32	%p5, %r8, %r9;
	and.pred  	%p6, %p4, %p5;
	@!%p6 bra 	BB12_4;
	bra.uni 	BB12_3;

BB12_3:
	cvta.to.global.u64 	%rd11, %rd2;
	mul.wide.u32 	%rd12, %r2, 132;
	mov.u64 	%rd13, Transpose$__cuda_local_var_258284_32_non_const_block;
	add.s64 	%rd14, %rd13, %rd12;
	mul.wide.u32 	%rd15, %r5, 4;
	add.s64 	%rd16, %rd14, %rd15;
	ld.shared.f32 	%f2, [%rd16];
	mad.lo.s32 	%r14, %r8, %r10, %r7;
	mul.wide.s32 	%rd17, %r14, 4;
	add.s64 	%rd18, %rd11, %rd17;
	st.global.f32 	[%rd18], %f2;

BB12_4:
	ret;
}

	// .globl	InitData
.visible .entry InitData(
	.param .u64 InitData_param_0,
	.param .u32 InitData_param_1,
	.param .f32 InitData_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [InitData_param_0];
	ld.param.u32 	%r2, [InitData_param_1];
	ld.param.f32 	%f1, [InitData_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB13_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	st.global.f32 	[%rd4], %f1;

BB13_2:
	ret;
}

	// .globl	AddToEachRow
.visible .entry AddToEachRow(
	.param .u64 AddToEachRow_param_0,
	.param .u64 AddToEachRow_param_1,
	.param .u32 AddToEachRow_param_2,
	.param .u32 AddToEachRow_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [AddToEachRow_param_0];
	ld.param.u64 	%rd2, [AddToEachRow_param_1];
	ld.param.u32 	%r3, [AddToEachRow_param_2];
	ld.param.u32 	%r4, [AddToEachRow_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB14_2;
	bra.uni 	BB14_1;

BB14_1:
	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r2, 4;
	add.s64 	%rd5, %rd3, %rd4;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB14_2:
	ret;
}

	// .globl	AddToEachColumn
.visible .entry AddToEachColumn(
	.param .u64 AddToEachColumn_param_0,
	.param .u64 AddToEachColumn_param_1,
	.param .u32 AddToEachColumn_param_2,
	.param .u32 AddToEachColumn_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [AddToEachColumn_param_0];
	ld.param.u64 	%rd2, [AddToEachColumn_param_1];
	ld.param.u32 	%r3, [AddToEachColumn_param_2];
	ld.param.u32 	%r4, [AddToEachColumn_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB15_2;
	bra.uni 	BB15_1;

BB15_1:
	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB15_2:
	ret;
}

	// .globl	TanH
.visible .entry TanH(
	.param .u64 TanH_param_0,
	.param .u64 TanH_param_1,
	.param .u32 TanH_param_2,
	.param .u32 TanH_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<33>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [TanH_param_0];
	ld.param.u64 	%rd3, [TanH_param_1];
	ld.param.u32 	%r3, [TanH_param_2];
	ld.param.u32 	%r4, [TanH_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB16_5;
	bra.uni 	BB16_1;

BB16_1:
	cvta.to.global.u64 	%rd4, %rd2;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r11;
	mul.wide.s32 	%rd5, %r11, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32	%p4, %f2, 0f3F0CCCCD;
	@%p4 bra 	BB16_3;
	bra.uni 	BB16_2;

BB16_3:
	mul.ftz.f32 	%f21, %f1, %f1;
	mov.f32 	%f22, 0fBD57BE66;
	mov.f32 	%f23, 0f3C86A81B;
	fma.rn.ftz.f32 	%f24, %f23, %f21, %f22;
	mov.f32 	%f25, 0f3E08677B;
	fma.rn.ftz.f32 	%f26, %f24, %f21, %f25;
	mov.f32 	%f27, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f28, %f26, %f21, %f27;
	mul.ftz.f32 	%f29, %f21, %f28;
	fma.rn.ftz.f32 	%f30, %f29, %f1, %f1;
	add.ftz.f32 	%f31, %f1, %f1;
	setp.eq.ftz.f32	%p6, %f1, 0f00000000;
	selp.f32	%f32, %f31, %f30, %p6;
	bra.uni 	BB16_4;

BB16_2:
	add.ftz.f32 	%f10, %f2, %f2;
	mul.ftz.f32 	%f11, %f10, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f12, %f11;
	mov.f32 	%f13, 0fBF317200;
	fma.rn.ftz.f32 	%f14, %f12, %f13, %f10;
	mov.f32 	%f15, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f16, %f12, %f15, %f14;
	mul.ftz.f32 	%f7, %f16, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f6,%f7;
	// inline asm
	ex2.approx.ftz.f32 	%f17, %f12;
	mov.f32 	%f18, 0f3F800000;
	fma.rn.ftz.f32 	%f9, %f6, %f17, %f18;
	// inline asm
	rcp.approx.ftz.f32 %f8,%f9;
	// inline asm
	mov.f32 	%f19, 0fC0000000;
	fma.rn.ftz.f32 	%f20, %f8, %f19, %f18;
	mov.b32 	 %r12, %f20;
	setp.ltu.ftz.f32	%p5, %f2, 0f42B00000;
	selp.b32	%r13, %r12, 1065353216, %p5;
	mov.b32 	 %r14, %f1;
	and.b32  	%r15, %r14, -2147483648;
	or.b32  	%r16, %r13, %r15;
	mov.b32 	 %f32, %r16;

BB16_4:
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f32;

BB16_5:
	ret;
}

	// .globl	TanHDerivative
.visible .entry TanHDerivative(
	.param .u64 TanHDerivative_param_0,
	.param .u64 TanHDerivative_param_1,
	.param .u32 TanHDerivative_param_2,
	.param .u32 TanHDerivative_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<36>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [TanHDerivative_param_0];
	ld.param.u64 	%rd3, [TanHDerivative_param_1];
	ld.param.u32 	%r3, [TanHDerivative_param_2];
	ld.param.u32 	%r4, [TanHDerivative_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB17_5;
	bra.uni 	BB17_1;

BB17_1:
	cvta.to.global.u64 	%rd4, %rd2;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r11;
	mul.wide.s32 	%rd5, %r11, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32	%p4, %f2, 0f3F0CCCCD;
	@%p4 bra 	BB17_3;
	bra.uni 	BB17_2;

BB17_3:
	mul.ftz.f32 	%f21, %f1, %f1;
	mov.f32 	%f22, 0fBD57BE66;
	mov.f32 	%f23, 0f3C86A81B;
	fma.rn.ftz.f32 	%f24, %f23, %f21, %f22;
	mov.f32 	%f25, 0f3E08677B;
	fma.rn.ftz.f32 	%f26, %f24, %f21, %f25;
	mov.f32 	%f27, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f28, %f26, %f21, %f27;
	mul.ftz.f32 	%f29, %f21, %f28;
	fma.rn.ftz.f32 	%f30, %f29, %f1, %f1;
	add.ftz.f32 	%f31, %f1, %f1;
	setp.eq.ftz.f32	%p6, %f1, 0f00000000;
	selp.f32	%f35, %f31, %f30, %p6;
	bra.uni 	BB17_4;

BB17_2:
	add.ftz.f32 	%f10, %f2, %f2;
	mul.ftz.f32 	%f11, %f10, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f12, %f11;
	mov.f32 	%f13, 0fBF317200;
	fma.rn.ftz.f32 	%f14, %f12, %f13, %f10;
	mov.f32 	%f15, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f16, %f12, %f15, %f14;
	mul.ftz.f32 	%f7, %f16, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f6,%f7;
	// inline asm
	ex2.approx.ftz.f32 	%f17, %f12;
	mov.f32 	%f18, 0f3F800000;
	fma.rn.ftz.f32 	%f9, %f6, %f17, %f18;
	// inline asm
	rcp.approx.ftz.f32 %f8,%f9;
	// inline asm
	mov.f32 	%f19, 0fC0000000;
	fma.rn.ftz.f32 	%f20, %f8, %f19, %f18;
	mov.b32 	 %r12, %f20;
	setp.ltu.ftz.f32	%p5, %f2, 0f42B00000;
	selp.b32	%r13, %r12, 1065353216, %p5;
	mov.b32 	 %r14, %f1;
	and.b32  	%r15, %r14, -2147483648;
	or.b32  	%r16, %r13, %r15;
	mov.b32 	 %f35, %r16;

BB17_4:
	cvta.to.global.u64 	%rd7, %rd3;
	mul.ftz.f32 	%f32, %f35, %f35;
	mov.f32 	%f33, 0f3F800000;
	sub.ftz.f32 	%f34, %f33, %f32;
	shl.b64 	%rd8, %rd1, 2;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f34;

BB17_5:
	ret;
}

	// .globl	Sigmoid
.visible .entry Sigmoid(
	.param .u64 Sigmoid_param_0,
	.param .u64 Sigmoid_param_1,
	.param .u32 Sigmoid_param_2,
	.param .u32 Sigmoid_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Sigmoid_param_0];
	ld.param.u64 	%rd2, [Sigmoid_param_1];
	ld.param.u32 	%r3, [Sigmoid_param_2];
	ld.param.u32 	%r4, [Sigmoid_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB18_2;
	bra.uni 	BB18_1;

BB18_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB18_2:
	ret;
}

	// .globl	SigmoidVector
.visible .entry SigmoidVector(
	.param .u64 SigmoidVector_param_0,
	.param .u64 SigmoidVector_param_1,
	.param .u32 SigmoidVector_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [SigmoidVector_param_0];
	ld.param.u64 	%rd2, [SigmoidVector_param_1];
	ld.param.u32 	%r2, [SigmoidVector_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB19_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB19_2:
	ret;
}

	// .globl	SigmoidDerivative
.visible .entry SigmoidDerivative(
	.param .u64 SigmoidDerivative_param_0,
	.param .u64 SigmoidDerivative_param_1,
	.param .u32 SigmoidDerivative_param_2,
	.param .u32 SigmoidDerivative_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [SigmoidDerivative_param_0];
	ld.param.u64 	%rd2, [SigmoidDerivative_param_1];
	ld.param.u32 	%r3, [SigmoidDerivative_param_2];
	ld.param.u32 	%r4, [SigmoidDerivative_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB20_2;
	bra.uni 	BB20_1;

BB20_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mul.ftz.f32 	%f2, %f1, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f3, %f2;
	add.ftz.f32 	%f4, %f3, 0f3F800000;
	rcp.approx.ftz.f32 	%f5, %f4;
	mov.f32 	%f6, 0f3F800000;
	sub.ftz.f32 	%f7, %f6, %f5;
	mul.ftz.f32 	%f8, %f5, %f7;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f8;

BB20_2:
	ret;
}

	// .globl	RELU
.visible .entry RELU(
	.param .u64 RELU_param_0,
	.param .u64 RELU_param_1,
	.param .u32 RELU_param_2,
	.param .u32 RELU_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [RELU_param_0];
	ld.param.u64 	%rd2, [RELU_param_1];
	ld.param.u32 	%r3, [RELU_param_2];
	ld.param.u32 	%r4, [RELU_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB21_2;
	bra.uni 	BB21_1;

BB21_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	setp.gtu.ftz.f32	%p4, %f1, 0f00000000;
	selp.f32	%f2, %f1, 0f00000000, %p4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB21_2:
	ret;
}

	// .globl	RELUDerivative
.visible .entry RELUDerivative(
	.param .u64 RELUDerivative_param_0,
	.param .u64 RELUDerivative_param_1,
	.param .u32 RELUDerivative_param_2,
	.param .u32 RELUDerivative_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [RELUDerivative_param_0];
	ld.param.u64 	%rd2, [RELUDerivative_param_1];
	ld.param.u32 	%r3, [RELUDerivative_param_2];
	ld.param.u32 	%r4, [RELUDerivative_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB22_2;
	bra.uni 	BB22_1;

BB22_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	setp.gtu.ftz.f32	%p4, %f1, 0f00000000;
	selp.f32	%f2, 0f3F800000, 0f00000000, %p4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB22_2:
	ret;
}

	// .globl	LeakyRELU
.visible .entry LeakyRELU(
	.param .u64 LeakyRELU_param_0,
	.param .u64 LeakyRELU_param_1,
	.param .u32 LeakyRELU_param_2,
	.param .u32 LeakyRELU_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [LeakyRELU_param_0];
	ld.param.u64 	%rd2, [LeakyRELU_param_1];
	ld.param.u32 	%r3, [LeakyRELU_param_2];
	ld.param.u32 	%r4, [LeakyRELU_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB23_2;
	bra.uni 	BB23_1;

BB23_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	setp.gtu.ftz.f32	%p4, %f1, 0f00000000;
	mul.ftz.f32 	%f2, %f1, 0f3C23D70A;
	selp.f32	%f3, %f1, %f2, %p4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB23_2:
	ret;
}

	// .globl	LeakyRELUDerivative
.visible .entry LeakyRELUDerivative(
	.param .u64 LeakyRELUDerivative_param_0,
	.param .u64 LeakyRELUDerivative_param_1,
	.param .u32 LeakyRELUDerivative_param_2,
	.param .u32 LeakyRELUDerivative_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [LeakyRELUDerivative_param_0];
	ld.param.u64 	%rd2, [LeakyRELUDerivative_param_1];
	ld.param.u32 	%r3, [LeakyRELUDerivative_param_2];
	ld.param.u32 	%r4, [LeakyRELUDerivative_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB24_2;
	bra.uni 	BB24_1;

BB24_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	setp.gtu.ftz.f32	%p4, %f1, 0f00000000;
	selp.f32	%f2, 0f3F800000, 0f3C23D70A, %p4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB24_2:
	ret;
}

	// .globl	SumRows
.visible .entry SumRows(
	.param .u64 SumRows_param_0,
	.param .u64 SumRows_param_1,
	.param .u32 SumRows_param_2,
	.param .u32 SumRows_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd2, [SumRows_param_0];
	ld.param.u64 	%rd3, [SumRows_param_1];
	ld.param.u32 	%r4, [SumRows_param_2];
	ld.param.u32 	%r5, [SumRows_param_3];
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB25_4;

	cvta.to.global.u64 	%rd1, %rd2;
	mov.f32 	%f8, 0f00000000;
	mov.f32 	%f9, %f8;
	mov.u32 	%r11, 0;
	setp.lt.s32	%p2, %r5, 1;
	@%p2 bra 	BB25_3;

BB25_2:
	mad.lo.s32 	%r10, %r11, %r4, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f32 	%f6, [%rd5];
	add.ftz.f32 	%f9, %f9, %f6;
	add.s32 	%r11, %r11, 1;
	setp.lt.s32	%p3, %r11, %r5;
	mov.f32 	%f8, %f9;
	@%p3 bra 	BB25_2;

BB25_3:
	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f8;

BB25_4:
	ret;
}

	// .globl	SumColumns
.visible .entry SumColumns(
	.param .u64 SumColumns_param_0,
	.param .u64 SumColumns_param_1,
	.param .u32 SumColumns_param_2,
	.param .u32 SumColumns_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [SumColumns_param_0];
	ld.param.u64 	%rd5, [SumColumns_param_1];
	ld.param.u32 	%r7, [SumColumns_param_2];
	ld.param.u32 	%r8, [SumColumns_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r8;
	@%p1 bra 	BB26_5;

	mov.f32 	%f7, 0f00000000;
	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB26_4;

	cvta.to.global.u64 	%rd6, %rd4;
	mul.lo.s32 	%r11, %r7, %r4;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd11, %rd6, %rd7;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r12, 0;

BB26_3:
	ld.global.f32 	%f6, [%rd11];
	add.ftz.f32 	%f7, %f7, %f6;
	add.s64 	%rd11, %rd11, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p3, %r12, %r7;
	@%p3 bra 	BB26_3;

BB26_4:
	cvta.to.global.u64 	%rd8, %rd5;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f7;

BB26_5:
	ret;
}

	// .globl	MemClear
.visible .entry MemClear(
	.param .u64 MemClear_param_0,
	.param .u32 MemClear_param_1,
	.param .u32 MemClear_param_2,
	.param .u32 MemClear_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [MemClear_param_0];
	ld.param.u32 	%r4, [MemClear_param_1];
	ld.param.u32 	%r2, [MemClear_param_2];
	ld.param.u32 	%r3, [MemClear_param_3];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB27_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mad.lo.s32 	%r8, %r1, %r3, %r2;
	mul.wide.s32 	%rd3, %r8, 4;
	add.s64 	%rd4, %rd2, %rd3;
	mov.u32 	%r9, 0;
	st.global.u32 	[%rd4], %r9;

BB27_2:
	ret;
}

	// .globl	MemCopy
.visible .entry MemCopy(
	.param .u64 MemCopy_param_0,
	.param .u64 MemCopy_param_1,
	.param .u32 MemCopy_param_2,
	.param .u32 MemCopy_param_3,
	.param .u32 MemCopy_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [MemCopy_param_0];
	ld.param.u64 	%rd2, [MemCopy_param_1];
	ld.param.u32 	%r4, [MemCopy_param_2];
	ld.param.u32 	%r2, [MemCopy_param_3];
	ld.param.u32 	%r3, [MemCopy_param_4];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB28_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r8, %r1, %r3, %r2;
	mul.wide.s32 	%rd4, %r8, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB28_2:
	ret;
}

	// .globl	SparseLoad
.visible .entry SparseLoad(
	.param .u64 SparseLoad_param_0,
	.param .u64 SparseLoad_param_1,
	.param .u64 SparseLoad_param_2,
	.param .u64 SparseLoad_param_3,
	.param .u64 SparseLoad_param_4,
	.param .u32 SparseLoad_param_5,
	.param .u32 SparseLoad_param_6
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd1, [SparseLoad_param_0];
	ld.param.u64 	%rd2, [SparseLoad_param_1];
	ld.param.u64 	%rd3, [SparseLoad_param_2];
	ld.param.u64 	%rd4, [SparseLoad_param_3];
	ld.param.u64 	%rd5, [SparseLoad_param_4];
	ld.param.u32 	%r3, [SparseLoad_param_5];
	ld.param.u32 	%r4, [SparseLoad_param_6];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r5, %r6, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB29_3;
	bra.uni 	BB29_1;

BB29_1:
	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r2, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u32 	%r11, [%rd8];
	setp.ge.s32	%p4, %r1, %r11;
	@%p4 bra 	BB29_3;

	cvta.to.global.u64 	%rd9, %rd1;
	cvta.to.global.u64 	%rd10, %rd5;
	cvta.to.global.u64 	%rd11, %rd4;
	cvta.to.global.u64 	%rd12, %rd2;
	add.s64 	%rd14, %rd12, %rd7;
	ld.global.u32 	%r12, [%rd14];
	add.s32 	%r13, %r12, %r1;
	mul.wide.s32 	%rd15, %r13, 4;
	add.s64 	%rd16, %rd11, %rd15;
	ld.global.u32 	%r14, [%rd16];
	mad.lo.s32 	%r15, %r2, %r3, %r14;
	add.s64 	%rd17, %rd10, %rd15;
	ld.global.f32 	%f1, [%rd17];
	mul.wide.s32 	%rd18, %r15, 4;
	add.s64 	%rd19, %rd9, %rd18;
	st.global.f32 	[%rd19], %f1;

BB29_3:
	ret;
}

	// .globl	FindMinAndMax
.visible .entry FindMinAndMax(
	.param .u64 FindMinAndMax_param_0,
	.param .u32 FindMinAndMax_param_1,
	.param .u64 FindMinAndMax_param_2,
	.param .u64 FindMinAndMax_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<22>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<19>;
	// demoted variable
	.shared .align 4 .b8 FindMinAndMax$__cuda_local_var_258477_32_non_const_block[4096];

	ld.param.u64 	%rd3, [FindMinAndMax_param_0];
	ld.param.u32 	%r7, [FindMinAndMax_param_1];
	ld.param.u64 	%rd4, [FindMinAndMax_param_2];
	ld.param.u64 	%rd5, [FindMinAndMax_param_3];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r8, %r1, %r2;
	mov.f32 	%f15, 0f00000000;
	setp.ge.s32	%p1, %r3, %r7;
	@%p1 bra 	BB30_2;

	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f15, [%rd8];

BB30_2:
	mul.wide.s32 	%rd9, %r2, 4;
	mov.u64 	%rd18, FindMinAndMax$__cuda_local_var_258477_32_non_const_block;
	add.s64 	%rd11, %rd18, %rd9;
	st.shared.f32 	[%rd11], %f15;
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB30_6;

	sub.s32 	%r10, %r7, %r3;
	mov.u32 	%r11, 1024;
	min.s32 	%r4, %r10, %r11;
	mov.f32 	%f20, 0f7F7FFFFF;
	mov.f32 	%f17, 0f00800000;
	mov.f32 	%f21, %f20;
	mov.f32 	%f18, %f17;
	mov.u32 	%r12, 0;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB30_5;

BB30_4:
	ld.shared.f32 	%f14, [%rd18];
	setp.gt.ftz.f32	%p4, %f14, %f18;
	selp.f32	%f18, %f14, %f18, %p4;
	setp.lt.ftz.f32	%p5, %f14, %f21;
	selp.f32	%f21, %f14, %f21, %p5;
	add.s64 	%rd18, %rd18, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p6, %r12, %r4;
	mov.f32 	%f17, %f18;
	mov.f32 	%f20, %f21;
	@%p6 bra 	BB30_4;

BB30_5:
	cvta.to.global.u64 	%rd13, %rd5;
	cvta.to.global.u64 	%rd14, %rd4;
	mul.wide.s32 	%rd15, %r1, 4;
	add.s64 	%rd16, %rd14, %rd15;
	st.global.f32 	[%rd16], %f20;
	add.s64 	%rd17, %rd13, %rd15;
	st.global.f32 	[%rd17], %f17;

BB30_6:
	ret;
}

	// .globl	FindSum
.visible .entry FindSum(
	.param .u64 FindSum_param_0,
	.param .u32 FindSum_param_1,
	.param .u64 FindSum_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<16>;
	// demoted variable
	.shared .align 4 .b8 FindSum$__cuda_local_var_258506_32_non_const_block[4096];

	ld.param.u64 	%rd3, [FindSum_param_0];
	ld.param.u32 	%r7, [FindSum_param_1];
	ld.param.u64 	%rd4, [FindSum_param_2];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r8, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r7;
	@%p1 bra 	BB31_2;

	cvta.to.global.u64 	%rd5, %rd3;
	mul.wide.s32 	%rd6, %r3, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f4, [%rd7];
	mul.wide.s32 	%rd8, %r2, 4;
	mov.u64 	%rd9, FindSum$__cuda_local_var_258506_32_non_const_block;
	add.s64 	%rd10, %rd9, %rd8;
	st.shared.f32 	[%rd10], %f4;

BB31_2:
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB31_6;

	shl.b32 	%r10, %r1, 10;
	sub.s32 	%r11, %r7, %r10;
	mov.u32 	%r12, 1024;
	min.s32 	%r4, %r11, %r12;
	mov.f32 	%f9, 0f00000000;
	mov.f32 	%f10, %f9;
	mov.u32 	%r13, 0;
	mov.u64 	%rd15, FindSum$__cuda_local_var_258506_32_non_const_block;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB31_5;

BB31_4:
	ld.shared.f32 	%f7, [%rd15];
	add.ftz.f32 	%f10, %f10, %f7;
	add.s64 	%rd15, %rd15, 4;
	add.s32 	%r13, %r13, 1;
	setp.lt.s32	%p4, %r13, %r4;
	mov.f32 	%f9, %f10;
	@%p4 bra 	BB31_4;

BB31_5:
	cvta.to.global.u64 	%rd12, %rd4;
	mul.wide.s32 	%rd13, %r1, 4;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f32 	[%rd14], %f9;

BB31_6:
	ret;
}

	// .globl	FindStdDev
.visible .entry FindStdDev(
	.param .u64 FindStdDev_param_0,
	.param .u32 FindStdDev_param_1,
	.param .f32 FindStdDev_param_2,
	.param .u64 FindStdDev_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<13>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<16>;
	// demoted variable
	.shared .align 4 .b8 FindStdDev$__cuda_local_var_258531_32_non_const_block[4096];

	ld.param.u64 	%rd3, [FindStdDev_param_0];
	ld.param.u32 	%r7, [FindStdDev_param_1];
	ld.param.f32 	%f4, [FindStdDev_param_2];
	ld.param.u64 	%rd4, [FindStdDev_param_3];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r8, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r7;
	@%p1 bra 	BB32_2;

	cvta.to.global.u64 	%rd5, %rd3;
	mul.wide.s32 	%rd6, %r3, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f5, [%rd7];
	mul.wide.s32 	%rd8, %r2, 4;
	mov.u64 	%rd9, FindStdDev$__cuda_local_var_258531_32_non_const_block;
	add.s64 	%rd10, %rd9, %rd8;
	st.shared.f32 	[%rd10], %f5;

BB32_2:
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB32_6;

	shl.b32 	%r10, %r1, 10;
	sub.s32 	%r11, %r7, %r10;
	mov.u32 	%r12, 1024;
	min.s32 	%r4, %r11, %r12;
	mov.f32 	%f11, 0f00000000;
	mov.f32 	%f12, %f11;
	mov.u32 	%r13, 0;
	mov.u64 	%rd15, FindStdDev$__cuda_local_var_258531_32_non_const_block;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB32_5;

BB32_4:
	ld.shared.f32 	%f8, [%rd15];
	sub.ftz.f32 	%f9, %f8, %f4;
	fma.rn.ftz.f32 	%f12, %f9, %f9, %f12;
	add.s64 	%rd15, %rd15, 4;
	add.s32 	%r13, %r13, 1;
	setp.lt.s32	%p4, %r13, %r4;
	mov.f32 	%f11, %f12;
	@%p4 bra 	BB32_4;

BB32_5:
	cvta.to.global.u64 	%rd12, %rd4;
	mul.wide.s32 	%rd13, %r1, 4;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f32 	[%rd14], %f11;

BB32_6:
	ret;
}

	// .globl	Constrain
.visible .entry Constrain(
	.param .u64 Constrain_param_0,
	.param .u32 Constrain_param_1,
	.param .f32 Constrain_param_2,
	.param .f32 Constrain_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [Constrain_param_0];
	ld.param.u32 	%r2, [Constrain_param_1];
	ld.param.f32 	%f2, [Constrain_param_2];
	ld.param.f32 	%f3, [Constrain_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB33_5;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd1, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd1];
	setp.geu.ftz.f32	%p2, %f1, %f2;
	@%p2 bra 	BB33_3;

	st.global.f32 	[%rd1], %f2;

BB33_3:
	setp.leu.ftz.f32	%p3, %f1, %f3;
	@%p3 bra 	BB33_5;

	st.global.f32 	[%rd1], %f3;

BB33_5:
	ret;
}

	// .globl	Pow
.visible .entry Pow(
	.param .u64 Pow_param_0,
	.param .u64 Pow_param_1,
	.param .u32 Pow_param_2,
	.param .f32 Pow_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Pow_param_0];
	ld.param.u64 	%rd2, [Pow_param_1];
	ld.param.u32 	%r2, [Pow_param_2];
	ld.param.f32 	%f1, [Pow_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB34_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	lg2.approx.ftz.f32 	%f3, %f2;
	mul.ftz.f32 	%f4, %f3, %f1;
	ex2.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB34_2:
	ret;
}

	// .globl	Diagonal
.visible .entry Diagonal(
	.param .u64 Diagonal_param_0,
	.param .u64 Diagonal_param_1,
	.param .u32 Diagonal_param_2,
	.param .u32 Diagonal_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [Diagonal_param_0];
	ld.param.u64 	%rd2, [Diagonal_param_1];
	ld.param.u32 	%r2, [Diagonal_param_2];
	ld.param.u32 	%r3, [Diagonal_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.lt.s32	%p1, %r1, %r2;
	setp.lt.s32	%p2, %r1, %r3;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB35_2;
	bra.uni 	BB35_1;

BB35_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r7, %r1, %r2, %r1;
	mul.wide.s32 	%rd4, %r7, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB35_2:
	ret;
}

	// .globl	L1Regularisation
.visible .entry L1Regularisation(
	.param .u64 L1Regularisation_param_0,
	.param .u32 L1Regularisation_param_1,
	.param .f32 L1Regularisation_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [L1Regularisation_param_0];
	ld.param.u32 	%r2, [L1Regularisation_param_1];
	ld.param.f32 	%f4, [L1Regularisation_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB36_4;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd1, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd1];
	setp.gt.ftz.f32	%p2, %f1, 0f00000000;
	mov.f32 	%f8, 0f3F800000;
	@%p2 bra 	BB36_3;

	setp.lt.ftz.f32	%p3, %f1, 0f00000000;
	selp.s32	%r6, -1, 0, %p3;
	cvt.rn.f32.s32	%f8, %r6;

BB36_3:
	mul.ftz.f32 	%f6, %f8, %f4;
	sub.ftz.f32 	%f7, %f1, %f6;
	st.global.f32 	[%rd1], %f7;

BB36_4:
	ret;
}

	// .globl	PointwiseDivideRows
.visible .entry PointwiseDivideRows(
	.param .u64 PointwiseDivideRows_param_0,
	.param .u64 PointwiseDivideRows_param_1,
	.param .u32 PointwiseDivideRows_param_2,
	.param .u32 PointwiseDivideRows_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [PointwiseDivideRows_param_0];
	ld.param.u64 	%rd2, [PointwiseDivideRows_param_1];
	ld.param.u32 	%r3, [PointwiseDivideRows_param_2];
	ld.param.u32 	%r4, [PointwiseDivideRows_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB37_2;
	bra.uni 	BB37_1;

BB37_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd5], %f3;

BB37_2:
	ret;
}

	// .globl	PointwiseDivideColumns
.visible .entry PointwiseDivideColumns(
	.param .u64 PointwiseDivideColumns_param_0,
	.param .u64 PointwiseDivideColumns_param_1,
	.param .u32 PointwiseDivideColumns_param_2,
	.param .u32 PointwiseDivideColumns_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [PointwiseDivideColumns_param_0];
	ld.param.u64 	%rd2, [PointwiseDivideColumns_param_1];
	ld.param.u32 	%r3, [PointwiseDivideColumns_param_2];
	ld.param.u32 	%r4, [PointwiseDivideColumns_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB38_2;
	bra.uni 	BB38_1;

BB38_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r2, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd5], %f3;

BB38_2:
	ret;
}

	// .globl	SplitRows
.visible .entry SplitRows(
	.param .u64 SplitRows_param_0,
	.param .u64 SplitRows_param_1,
	.param .u64 SplitRows_param_2,
	.param .u32 SplitRows_param_3,
	.param .u32 SplitRows_param_4,
	.param .u32 SplitRows_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [SplitRows_param_0];
	ld.param.u64 	%rd2, [SplitRows_param_1];
	ld.param.u64 	%rd3, [SplitRows_param_2];
	ld.param.u32 	%r4, [SplitRows_param_3];
	ld.param.u32 	%r6, [SplitRows_param_4];
	ld.param.u32 	%r5, [SplitRows_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r4;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB39_4;
	bra.uni 	BB39_1;

BB39_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r3, %r2, %r4, %r1;
	mul.wide.s32 	%rd5, %r3, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.lt.s32	%p4, %r2, %r5;
	@%p4 bra 	BB39_3;
	bra.uni 	BB39_2;

BB39_3:
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd12, %rd10, %rd5;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	BB39_4;

BB39_2:
	cvta.to.global.u64 	%rd7, %rd3;
	sub.s32 	%r13, %r2, %r5;
	mad.lo.s32 	%r14, %r13, %r4, %r1;
	mul.wide.s32 	%rd8, %r14, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f1;

BB39_4:
	ret;
}

	// .globl	SplitColumns
.visible .entry SplitColumns(
	.param .u64 SplitColumns_param_0,
	.param .u64 SplitColumns_param_1,
	.param .u64 SplitColumns_param_2,
	.param .u32 SplitColumns_param_3,
	.param .u32 SplitColumns_param_4,
	.param .u32 SplitColumns_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [SplitColumns_param_0];
	ld.param.u64 	%rd2, [SplitColumns_param_1];
	ld.param.u64 	%rd3, [SplitColumns_param_2];
	ld.param.u32 	%r3, [SplitColumns_param_3];
	ld.param.u32 	%r5, [SplitColumns_param_4];
	ld.param.u32 	%r4, [SplitColumns_param_5];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r2, %r9, %r10, %r11;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB40_4;
	bra.uni 	BB40_1;

BB40_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r12, %r2, %r3, %r1;
	mul.wide.s32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.lt.s32	%p4, %r1, %r4;
	@%p4 bra 	BB40_3;
	bra.uni 	BB40_2;

BB40_3:
	cvta.to.global.u64 	%rd10, %rd2;
	mad.lo.s32 	%r16, %r2, %r4, %r1;
	mul.wide.s32 	%rd11, %r16, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	BB40_4;

BB40_2:
	cvta.to.global.u64 	%rd7, %rd3;
	sub.s32 	%r13, %r1, %r4;
	sub.s32 	%r14, %r3, %r4;
	mad.lo.s32 	%r15, %r2, %r14, %r13;
	mul.wide.s32 	%rd8, %r15, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f1;

BB40_4:
	ret;
}

	// .globl	ConcatColumns
.visible .entry ConcatColumns(
	.param .u64 ConcatColumns_param_0,
	.param .u64 ConcatColumns_param_1,
	.param .u64 ConcatColumns_param_2,
	.param .u32 ConcatColumns_param_3,
	.param .u32 ConcatColumns_param_4,
	.param .u32 ConcatColumns_param_5,
	.param .u32 ConcatColumns_param_6
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd4, [ConcatColumns_param_0];
	ld.param.u64 	%rd5, [ConcatColumns_param_1];
	ld.param.u64 	%rd6, [ConcatColumns_param_2];
	ld.param.u32 	%r3, [ConcatColumns_param_3];
	ld.param.u32 	%r6, [ConcatColumns_param_4];
	ld.param.u32 	%r4, [ConcatColumns_param_5];
	ld.param.u32 	%r5, [ConcatColumns_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB41_5;
	bra.uni 	BB41_1;

BB41_1:
	setp.lt.s32	%p4, %r1, %r4;
	@%p4 bra 	BB41_3;
	bra.uni 	BB41_2;

BB41_3:
	cvta.to.global.u64 	%rd9, %rd4;
	mad.lo.s32 	%r15, %r2, %r4, %r1;
	mul.wide.s32 	%rd10, %r15, 4;
	add.s64 	%rd14, %rd9, %rd10;
	bra.uni 	BB41_4;

BB41_2:
	cvta.to.global.u64 	%rd7, %rd5;
	sub.s32 	%r13, %r1, %r4;
	mad.lo.s32 	%r14, %r2, %r5, %r13;
	mul.wide.s32 	%rd8, %r14, 4;
	add.s64 	%rd14, %rd7, %rd8;

BB41_4:
	cvta.to.global.u64 	%rd11, %rd6;
	ld.global.f32 	%f1, [%rd14];
	mad.lo.s32 	%r16, %r2, %r3, %r1;
	mul.wide.s32 	%rd12, %r16, 4;
	add.s64 	%rd13, %rd11, %rd12;
	st.global.f32 	[%rd13], %f1;

BB41_5:
	ret;
}

	// .globl	ConcatRows
.visible .entry ConcatRows(
	.param .u64 ConcatRows_param_0,
	.param .u64 ConcatRows_param_1,
	.param .u64 ConcatRows_param_2,
	.param .u32 ConcatRows_param_3,
	.param .u32 ConcatRows_param_4,
	.param .u32 ConcatRows_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd4, [ConcatRows_param_0];
	ld.param.u64 	%rd5, [ConcatRows_param_1];
	ld.param.u64 	%rd6, [ConcatRows_param_2];
	ld.param.u32 	%r4, [ConcatRows_param_3];
	ld.param.u32 	%r6, [ConcatRows_param_4];
	ld.param.u32 	%r5, [ConcatRows_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r4;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB42_5;
	bra.uni 	BB42_1;

BB42_1:
	setp.lt.s32	%p4, %r2, %r5;
	mad.lo.s32 	%r3, %r2, %r4, %r1;
	@%p4 bra 	BB42_3;
	bra.uni 	BB42_2;

BB42_3:
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.s32 	%rd10, %r3, 4;
	add.s64 	%rd14, %rd9, %rd10;
	bra.uni 	BB42_4;

BB42_2:
	cvta.to.global.u64 	%rd7, %rd5;
	sub.s32 	%r13, %r2, %r5;
	mad.lo.s32 	%r14, %r13, %r4, %r1;
	mul.wide.s32 	%rd8, %r14, 4;
	add.s64 	%rd14, %rd7, %rd8;

BB42_4:
	cvta.to.global.u64 	%rd11, %rd6;
	ld.global.f32 	%f1, [%rd14];
	mul.wide.s32 	%rd12, %r3, 4;
	add.s64 	%rd13, %rd11, %rd12;
	st.global.f32 	[%rd13], %f1;

BB42_5:
	ret;
}

	// .globl	EuclideanDistance
.visible .entry EuclideanDistance(
	.param .u64 EuclideanDistance_param_0,
	.param .u64 EuclideanDistance_param_1,
	.param .u64 EuclideanDistance_param_2,
	.param .u32 EuclideanDistance_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [EuclideanDistance_param_0];
	ld.param.u64 	%rd2, [EuclideanDistance_param_1];
	ld.param.u64 	%rd3, [EuclideanDistance_param_2];
	ld.param.u32 	%r2, [EuclideanDistance_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB43_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f4;

BB43_2:
	ret;
}

	// .globl	MultiEuclideanDistance
.visible .entry MultiEuclideanDistance(
	.param .u64 MultiEuclideanDistance_param_0,
	.param .u64 MultiEuclideanDistance_param_1,
	.param .u64 MultiEuclideanDistance_param_2,
	.param .u32 MultiEuclideanDistance_param_3,
	.param .u32 MultiEuclideanDistance_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd1, [MultiEuclideanDistance_param_0];
	ld.param.u64 	%rd2, [MultiEuclideanDistance_param_1];
	ld.param.u64 	%rd3, [MultiEuclideanDistance_param_2];
	ld.param.u32 	%r3, [MultiEuclideanDistance_param_3];
	ld.param.u32 	%r4, [MultiEuclideanDistance_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB44_2;
	bra.uni 	BB44_1;

BB44_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r2, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	add.s64 	%rd12, %rd11, %rd5;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd13, %rd3;
	mul.wide.s32 	%rd14, %r11, 4;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f4;

BB44_2:
	ret;
}

	// .globl	ManhattanDistance
.visible .entry ManhattanDistance(
	.param .u64 ManhattanDistance_param_0,
	.param .u64 ManhattanDistance_param_1,
	.param .u64 ManhattanDistance_param_2,
	.param .u32 ManhattanDistance_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [ManhattanDistance_param_0];
	ld.param.u64 	%rd2, [ManhattanDistance_param_1];
	ld.param.u64 	%rd3, [ManhattanDistance_param_2];
	ld.param.u32 	%r2, [ManhattanDistance_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB45_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	abs.ftz.f32 	%f4, %f3;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f4;

BB45_2:
	ret;
}

	// .globl	MultiManhattanDistance
.visible .entry MultiManhattanDistance(
	.param .u64 MultiManhattanDistance_param_0,
	.param .u64 MultiManhattanDistance_param_1,
	.param .u64 MultiManhattanDistance_param_2,
	.param .u32 MultiManhattanDistance_param_3,
	.param .u32 MultiManhattanDistance_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd1, [MultiManhattanDistance_param_0];
	ld.param.u64 	%rd2, [MultiManhattanDistance_param_1];
	ld.param.u64 	%rd3, [MultiManhattanDistance_param_2];
	ld.param.u32 	%r3, [MultiManhattanDistance_param_3];
	ld.param.u32 	%r4, [MultiManhattanDistance_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB46_2;
	bra.uni 	BB46_1;

BB46_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r2, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	add.s64 	%rd12, %rd11, %rd5;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	abs.ftz.f32 	%f4, %f3;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd13, %rd3;
	mul.wide.s32 	%rd14, %r11, 4;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f4;

BB46_2:
	ret;
}

	// .globl	Abs
.visible .entry Abs(
	.param .u64 Abs_param_0,
	.param .u64 Abs_param_1,
	.param .u32 Abs_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Abs_param_0];
	ld.param.u64 	%rd2, [Abs_param_1];
	ld.param.u32 	%r2, [Abs_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB47_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	abs.ftz.f32 	%f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB47_2:
	ret;
}

	// .globl	Log
.visible .entry Log(
	.param .u64 Log_param_0,
	.param .u64 Log_param_1,
	.param .u32 Log_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Log_param_0];
	ld.param.u64 	%rd2, [Log_param_1];
	ld.param.u32 	%r2, [Log_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB48_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	lg2.approx.ftz.f32 	%f2, %f1;
	mul.ftz.f32 	%f3, %f2, 0f3F317218;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB48_2:
	ret;
}

	// .globl	Normalise
.visible .entry Normalise(
	.param .u64 Normalise_param_0,
	.param .u32 Normalise_param_1,
	.param .f32 Normalise_param_2,
	.param .f32 Normalise_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [Normalise_param_0];
	ld.param.u32 	%r2, [Normalise_param_1];
	ld.param.f32 	%f1, [Normalise_param_2];
	ld.param.f32 	%f2, [Normalise_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB49_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f3, [%rd4];
	sub.ftz.f32 	%f4, %f3, %f1;
	div.approx.ftz.f32 	%f5, %f4, %f2;
	st.global.f32 	[%rd4], %f5;

BB49_2:
	ret;
}

	// .globl	SoftmaxVector
.visible .entry SoftmaxVector(
	.param .u64 SoftmaxVector_param_0,
	.param .u64 SoftmaxVector_param_1,
	.param .u32 SoftmaxVector_param_2,
	.param .f32 SoftmaxVector_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [SoftmaxVector_param_0];
	ld.param.u64 	%rd2, [SoftmaxVector_param_1];
	ld.param.u32 	%r2, [SoftmaxVector_param_2];
	ld.param.f32 	%f1, [SoftmaxVector_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB50_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB50_2:
	ret;
}

	// .globl	VectorAdd
.visible .entry VectorAdd(
	.param .u64 VectorAdd_param_0,
	.param .u32 VectorAdd_param_1,
	.param .f32 VectorAdd_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [VectorAdd_param_0];
	ld.param.u32 	%r2, [VectorAdd_param_1];
	ld.param.f32 	%f1, [VectorAdd_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB51_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f2, [%rd4];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;

BB51_2:
	ret;
}

	// .globl	VectorCopyRandom
.visible .entry VectorCopyRandom(
	.param .u64 VectorCopyRandom_param_0,
	.param .u64 VectorCopyRandom_param_1,
	.param .u64 VectorCopyRandom_param_2,
	.param .u32 VectorCopyRandom_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [VectorCopyRandom_param_0];
	ld.param.u64 	%rd2, [VectorCopyRandom_param_1];
	ld.param.u64 	%rd3, [VectorCopyRandom_param_2];
	ld.param.u32 	%r2, [VectorCopyRandom_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB52_2;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.u32 	%r6, [%rd6];
	cvta.to.global.u64 	%rd7, %rd1;
	mul.wide.s32 	%rd8, %r6, 4;
	add.s64 	%rd9, %rd7, %rd8;
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd11, %rd10, %rd5;
	ld.global.f32 	%f1, [%rd11];
	ld.global.f32 	%f2, [%rd9];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd11], %f3;

BB52_2:
	ret;
}

	// .globl	CopyToMatrix
.visible .entry CopyToMatrix(
	.param .u64 CopyToMatrix_param_0,
	.param .u64 CopyToMatrix_param_1,
	.param .u32 CopyToMatrix_param_2,
	.param .u32 CopyToMatrix_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [CopyToMatrix_param_0];
	ld.param.u64 	%rd2, [CopyToMatrix_param_1];
	ld.param.u32 	%r3, [CopyToMatrix_param_2];
	ld.param.u32 	%r4, [CopyToMatrix_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB53_2;
	bra.uni 	BB53_1;

BB53_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.s32 	%rd8, %r2, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r11, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB53_2:
	ret;
}

	// .globl	VectorSplit
.visible .entry VectorSplit(
	.param .u64 VectorSplit_param_0,
	.param .u64 VectorSplit_param_1,
	.param .u32 VectorSplit_param_2,
	.param .u32 VectorSplit_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [VectorSplit_param_0];
	ld.param.u64 	%rd2, [VectorSplit_param_1];
	ld.param.u32 	%r3, [VectorSplit_param_2];
	ld.param.u32 	%r2, [VectorSplit_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB54_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	div.s32 	%r7, %r1, %r2;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r7, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u64 	%rd9, [%rd8];
	cvta.to.global.u64 	%rd10, %rd9;
	rem.s32 	%r8, %r1, %r2;
	mul.wide.s32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB54_2:
	ret;
}

	// .globl	TensorConvertToVector
.visible .entry TensorConvertToVector(
	.param .u64 TensorConvertToVector_param_0,
	.param .u64 TensorConvertToVector_param_1,
	.param .u32 TensorConvertToVector_param_2,
	.param .u32 TensorConvertToVector_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [TensorConvertToVector_param_0];
	ld.param.u64 	%rd2, [TensorConvertToVector_param_1];
	ld.param.u32 	%r2, [TensorConvertToVector_param_2];
	ld.param.u32 	%r3, [TensorConvertToVector_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB55_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.s32 	%r7, %r1, %r2;
	mul.wide.s32 	%rd4, %r7, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	rem.s32 	%r8, %r1, %r2;
	mul.wide.s32 	%rd8, %r8, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB55_2:
	ret;
}

	// .globl	TensorConvertToMatrix
.visible .entry TensorConvertToMatrix(
	.param .u64 TensorConvertToMatrix_param_0,
	.param .u64 TensorConvertToMatrix_param_1,
	.param .u32 TensorConvertToMatrix_param_2,
	.param .u32 TensorConvertToMatrix_param_3,
	.param .u32 TensorConvertToMatrix_param_4,
	.param .u32 TensorConvertToMatrix_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [TensorConvertToMatrix_param_0];
	ld.param.u64 	%rd2, [TensorConvertToMatrix_param_1];
	ld.param.u32 	%r3, [TensorConvertToMatrix_param_2];
	ld.param.u32 	%r4, [TensorConvertToMatrix_param_3];
	ld.param.u32 	%r5, [TensorConvertToMatrix_param_4];
	ld.param.u32 	%r6, [TensorConvertToMatrix_param_5];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB56_2;
	bra.uni 	BB56_1;

BB56_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r2, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	rem.s32 	%r13, %r1, %r4;
	div.s32 	%r14, %r1, %r4;
	mad.lo.s32 	%r15, %r13, %r3, %r14;
	mul.wide.s32 	%rd8, %r15, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	mad.lo.s32 	%r16, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r16, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB56_2:
	ret;
}

	// .globl	TensorAddPadding
.visible .entry TensorAddPadding(
	.param .u64 TensorAddPadding_param_0,
	.param .u64 TensorAddPadding_param_1,
	.param .u32 TensorAddPadding_param_2,
	.param .u32 TensorAddPadding_param_3,
	.param .u32 TensorAddPadding_param_4,
	.param .u32 TensorAddPadding_param_5,
	.param .u32 TensorAddPadding_param_6,
	.param .u32 TensorAddPadding_param_7
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd7, [TensorAddPadding_param_0];
	ld.param.u64 	%rd8, [TensorAddPadding_param_1];
	ld.param.u32 	%r7, [TensorAddPadding_param_2];
	ld.param.u32 	%r8, [TensorAddPadding_param_4];
	ld.param.u32 	%r11, [TensorAddPadding_param_5];
	ld.param.u32 	%r9, [TensorAddPadding_param_6];
	ld.param.u32 	%r10, [TensorAddPadding_param_7];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r12, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r2, %r10;
	setp.ge.s32	%p2, %r1, %r10;
	and.pred  	%p3, %p1, %p2;
	sub.s32 	%r18, %r8, %r10;
	setp.lt.s32	%p4, %r1, %r18;
	and.pred  	%p5, %p3, %p4;
	sub.s32 	%r19, %r11, %r10;
	setp.lt.s32	%p6, %r2, %r19;
	and.pred  	%p7, %p5, %p6;
	@!%p7 bra 	BB57_4;
	bra.uni 	BB57_1;

BB57_1:
	sub.s32 	%r20, %r2, %r10;
	sub.s32 	%r21, %r1, %r10;
	mad.lo.s32 	%r3, %r20, %r7, %r21;
	mad.lo.s32 	%r4, %r2, %r8, %r1;
	setp.lt.s32	%p8, %r9, 1;
	@%p8 bra 	BB57_4;

	cvta.to.global.u64 	%rd18, %rd8;
	cvta.to.global.u64 	%rd17, %rd7;
	mov.u32 	%r23, 0;

BB57_3:
	ld.global.u64 	%rd9, [%rd17];
	cvta.to.global.u64 	%rd10, %rd9;
	mul.wide.s32 	%rd11, %r3, 4;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f32 	%f1, [%rd12];
	ld.global.u64 	%rd13, [%rd18];
	cvta.to.global.u64 	%rd14, %rd13;
	mul.wide.s32 	%rd15, %r4, 4;
	add.s64 	%rd16, %rd14, %rd15;
	st.global.f32 	[%rd16], %f1;
	add.s64 	%rd18, %rd18, 8;
	add.s64 	%rd17, %rd17, 8;
	add.s32 	%r23, %r23, 1;
	setp.lt.s32	%p9, %r23, %r9;
	@%p9 bra 	BB57_3;

BB57_4:
	ret;
}

	// .globl	TensorIm2Col
.visible .entry TensorIm2Col(
	.param .u64 TensorIm2Col_param_0,
	.param .u64 TensorIm2Col_param_1,
	.param .u32 TensorIm2Col_param_2,
	.param .u32 TensorIm2Col_param_3,
	.param .u32 TensorIm2Col_param_4,
	.param .u32 TensorIm2Col_param_5,
	.param .u32 TensorIm2Col_param_6,
	.param .u32 TensorIm2Col_param_7,
	.param .u32 TensorIm2Col_param_8,
	.param .u32 TensorIm2Col_param_9
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [TensorIm2Col_param_0];
	ld.param.u64 	%rd2, [TensorIm2Col_param_1];
	ld.param.u32 	%r3, [TensorIm2Col_param_2];
	ld.param.u32 	%r4, [TensorIm2Col_param_3];
	ld.param.u32 	%r5, [TensorIm2Col_param_4];
	ld.param.u32 	%r9, [TensorIm2Col_param_5];
	ld.param.u32 	%r6, [TensorIm2Col_param_7];
	ld.param.u32 	%r7, [TensorIm2Col_param_8];
	ld.param.u32 	%r8, [TensorIm2Col_param_9];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r9;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB58_2;
	bra.uni 	BB58_1;

BB58_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.lo.s32 	%r16, %r7, %r6;
	div.s32 	%r17, %r2, %r16;
	rem.s32 	%r18, %r2, %r16;
	mul.wide.s32 	%rd4, %r17, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	sub.s32 	%r19, %r4, %r6;
	div.s32 	%r20, %r19, %r8;
	add.s32 	%r21, %r20, 1;
	sub.s32 	%r22, %r3, %r7;
	div.s32 	%r23, %r22, %r8;
	add.s32 	%r24, %r23, 1;
	rem.s32 	%r25, %r1, %r21;
	div.s32 	%r26, %r1, %r24;
	rem.s32 	%r27, %r18, %r6;
	mad.lo.s32 	%r28, %r25, %r8, %r27;
	div.s32 	%r29, %r18, %r7;
	mad.lo.s32 	%r30, %r26, %r8, %r29;
	mad.lo.s32 	%r31, %r28, %r3, %r30;
	mul.wide.s32 	%rd8, %r31, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	mad.lo.s32 	%r32, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r32, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB58_2:
	ret;
}


