//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21373419
// Cuda compilation tools, release 8.0, V8.0.55
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_35
.address_size 64

	// .globl	PointwiseMultiply
// PointwiseMultiply$__cuda_local_var_204209_32_non_const_blockA has been demoted
// PointwiseDivide$__cuda_local_var_204224_32_non_const_blockA has been demoted
// Sqrt$__cuda_local_var_204239_32_non_const_blockA has been demoted
// AddInPlace$__cuda_local_var_204255_32_non_const_blockB has been demoted
// SubtractInPlace$__cuda_local_var_204270_32_non_const_blockB has been demoted
// TanH$__cuda_local_var_204301_32_non_const_blockA has been demoted
// TanHDerivative$__cuda_local_var_204316_32_non_const_blockA has been demoted
// Sigmoid$__cuda_local_var_204331_32_non_const_blockA has been demoted
// SigmoidDerivative$__cuda_local_var_204346_32_non_const_blockA has been demoted
// RELU$__cuda_local_var_204363_32_non_const_blockA has been demoted
// RELUDerivative$__cuda_local_var_204380_32_non_const_blockA has been demoted
// LeakyRELU$__cuda_local_var_204397_32_non_const_blockA has been demoted
// LeakyRELUDerivative$__cuda_local_var_204414_32_non_const_blockA has been demoted
// Reverse$__cuda_local_var_204431_32_non_const_blockA has been demoted
// FindMinAndMax$__cuda_local_var_204482_32_non_const_block has been demoted
// FindSum$__cuda_local_var_204511_32_non_const_block has been demoted
// FindStdDev$__cuda_local_var_204536_32_non_const_block has been demoted

.visible .entry PointwiseMultiply(
	.param .u64 PointwiseMultiply_param_0,
	.param .u64 PointwiseMultiply_param_1,
	.param .u32 PointwiseMultiply_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 PointwiseMultiply$__cuda_local_var_204209_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [PointwiseMultiply_param_0];
	ld.param.u64 	%rd3, [PointwiseMultiply_param_1];
	ld.param.u32 	%r2, [PointwiseMultiply_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, PointwiseMultiply$__cuda_local_var_204209_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB0_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB0_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB0_4;
	bra.uni 	BB0_3;

BB0_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f3, [%rd11];
	mul.ftz.f32 	%f4, %f2, %f3;
	st.global.f32 	[%rd11], %f4;

BB0_4:
	ret;
}

	// .globl	PointwiseDivide
.visible .entry PointwiseDivide(
	.param .u64 PointwiseDivide_param_0,
	.param .u64 PointwiseDivide_param_1,
	.param .u32 PointwiseDivide_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 PointwiseDivide$__cuda_local_var_204224_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [PointwiseDivide_param_0];
	ld.param.u64 	%rd3, [PointwiseDivide_param_1];
	ld.param.u32 	%r2, [PointwiseDivide_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, PointwiseDivide$__cuda_local_var_204224_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB1_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB1_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB1_4;
	bra.uni 	BB1_3;

BB1_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f3, [%rd11];
	div.approx.ftz.f32 	%f4, %f2, %f3;
	st.global.f32 	[%rd11], %f4;

BB1_4:
	ret;
}

	// .globl	Sqrt
.visible .entry Sqrt(
	.param .u64 Sqrt_param_0,
	.param .u64 Sqrt_param_1,
	.param .u32 Sqrt_param_2,
	.param .f32 Sqrt_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 Sqrt$__cuda_local_var_204239_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [Sqrt_param_0];
	ld.param.u64 	%rd3, [Sqrt_param_1];
	ld.param.u32 	%r2, [Sqrt_param_2];
	ld.param.f32 	%f1, [Sqrt_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, Sqrt$__cuda_local_var_204239_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB2_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f2, [%rd8];
	st.shared.f32 	[%rd1], %f2;

BB2_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB2_4;
	bra.uni 	BB2_3;

BB2_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f3, [%rd1];
	add.ftz.f32 	%f4, %f3, %f1;
	sqrt.approx.ftz.f32 	%f5, %f4;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f5;

BB2_4:
	ret;
}

	// .globl	AddInPlace
.visible .entry AddInPlace(
	.param .u64 AddInPlace_param_0,
	.param .u64 AddInPlace_param_1,
	.param .u32 AddInPlace_param_2,
	.param .f32 AddInPlace_param_3,
	.param .f32 AddInPlace_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 AddInPlace$__cuda_local_var_204255_32_non_const_blockB[1024];

	ld.param.u64 	%rd2, [AddInPlace_param_0];
	ld.param.u64 	%rd3, [AddInPlace_param_1];
	ld.param.u32 	%r2, [AddInPlace_param_2];
	ld.param.f32 	%f1, [AddInPlace_param_3];
	ld.param.f32 	%f2, [AddInPlace_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, AddInPlace$__cuda_local_var_204255_32_non_const_blockB;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB3_2;

	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f3, [%rd8];
	st.shared.f32 	[%rd1], %f3;

BB3_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB3_4;
	bra.uni 	BB3_3;

BB3_3:
	cvta.to.global.u64 	%rd9, %rd2;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f4, [%rd11];
	ld.shared.f32 	%f5, [%rd1];
	mul.ftz.f32 	%f6, %f5, %f2;
	fma.rn.ftz.f32 	%f7, %f4, %f1, %f6;
	st.global.f32 	[%rd11], %f7;

BB3_4:
	ret;
}

	// .globl	SubtractInPlace
.visible .entry SubtractInPlace(
	.param .u64 SubtractInPlace_param_0,
	.param .u64 SubtractInPlace_param_1,
	.param .u32 SubtractInPlace_param_2,
	.param .f32 SubtractInPlace_param_3,
	.param .f32 SubtractInPlace_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 SubtractInPlace$__cuda_local_var_204270_32_non_const_blockB[1024];

	ld.param.u64 	%rd2, [SubtractInPlace_param_0];
	ld.param.u64 	%rd3, [SubtractInPlace_param_1];
	ld.param.u32 	%r2, [SubtractInPlace_param_2];
	ld.param.f32 	%f1, [SubtractInPlace_param_3];
	ld.param.f32 	%f2, [SubtractInPlace_param_4];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, SubtractInPlace$__cuda_local_var_204270_32_non_const_blockB;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB4_2;

	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f3, [%rd8];
	st.shared.f32 	[%rd1], %f3;

BB4_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB4_4;
	bra.uni 	BB4_3;

BB4_3:
	cvta.to.global.u64 	%rd9, %rd2;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.f32 	%f4, [%rd11];
	mul.ftz.f32 	%f5, %f4, %f1;
	ld.shared.f32 	%f6, [%rd1];
	mul.ftz.f32 	%f7, %f6, %f2;
	sub.ftz.f32 	%f8, %f5, %f7;
	st.global.f32 	[%rd11], %f8;

BB4_4:
	ret;
}

	// .globl	AddToEachRow
.visible .entry AddToEachRow(
	.param .u64 AddToEachRow_param_0,
	.param .u64 AddToEachRow_param_1,
	.param .u32 AddToEachRow_param_2,
	.param .u32 AddToEachRow_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [AddToEachRow_param_0];
	ld.param.u64 	%rd2, [AddToEachRow_param_1];
	ld.param.u32 	%r3, [AddToEachRow_param_2];
	ld.param.u32 	%r4, [AddToEachRow_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB5_2;
	bra.uni 	BB5_1;

BB5_1:
	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r2, 4;
	add.s64 	%rd5, %rd3, %rd4;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB5_2:
	ret;
}

	// .globl	AddToEachColumn
.visible .entry AddToEachColumn(
	.param .u64 AddToEachColumn_param_0,
	.param .u64 AddToEachColumn_param_1,
	.param .u32 AddToEachColumn_param_2,
	.param .u32 AddToEachColumn_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [AddToEachColumn_param_0];
	ld.param.u64 	%rd2, [AddToEachColumn_param_1];
	ld.param.u32 	%r3, [AddToEachColumn_param_2];
	ld.param.u32 	%r4, [AddToEachColumn_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB6_2;
	bra.uni 	BB6_1;

BB6_1:
	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd8], %f3;

BB6_2:
	ret;
}

	// .globl	TanH
.visible .entry TanH(
	.param .u64 TanH_param_0,
	.param .u64 TanH_param_1,
	.param .u32 TanH_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 TanH$__cuda_local_var_204301_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [TanH_param_0];
	ld.param.u64 	%rd3, [TanH_param_1];
	ld.param.u32 	%r2, [TanH_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, TanH$__cuda_local_var_204301_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB7_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f6, [%rd8];
	st.shared.f32 	[%rd1], %f6;

BB7_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB7_7;
	bra.uni 	BB7_3;

BB7_3:
	ld.shared.f32 	%f1, [%rd1];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32	%p3, %f2, 0f3F0CCCCD;
	@%p3 bra 	BB7_5;
	bra.uni 	BB7_4;

BB7_5:
	mul.ftz.f32 	%f22, %f1, %f1;
	mov.f32 	%f23, 0fBD57BE66;
	mov.f32 	%f24, 0f3C86A81B;
	fma.rn.ftz.f32 	%f25, %f24, %f22, %f23;
	mov.f32 	%f26, 0f3E08677B;
	fma.rn.ftz.f32 	%f27, %f25, %f22, %f26;
	mov.f32 	%f28, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f29, %f27, %f22, %f28;
	mul.ftz.f32 	%f30, %f22, %f29;
	fma.rn.ftz.f32 	%f31, %f30, %f1, %f1;
	add.ftz.f32 	%f32, %f1, %f1;
	setp.eq.ftz.f32	%p5, %f1, 0f00000000;
	selp.f32	%f33, %f32, %f31, %p5;
	bra.uni 	BB7_6;

BB7_4:
	add.ftz.f32 	%f11, %f2, %f2;
	mul.ftz.f32 	%f12, %f11, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f13, %f12;
	mov.f32 	%f14, 0fBF317200;
	fma.rn.ftz.f32 	%f15, %f13, %f14, %f11;
	mov.f32 	%f16, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f17, %f13, %f16, %f15;
	mul.ftz.f32 	%f8, %f17, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f7,%f8;
	// inline asm
	ex2.approx.ftz.f32 	%f18, %f13;
	mov.f32 	%f19, 0f3F800000;
	fma.rn.ftz.f32 	%f10, %f7, %f18, %f19;
	// inline asm
	rcp.approx.ftz.f32 %f9,%f10;
	// inline asm
	mov.f32 	%f20, 0fC0000000;
	fma.rn.ftz.f32 	%f21, %f9, %f20, %f19;
	mov.b32 	 %r6, %f21;
	setp.ltu.ftz.f32	%p4, %f2, 0f42B00000;
	selp.b32	%r7, %r6, 1065353216, %p4;
	mov.b32 	 %r8, %f1;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f33, %r10;

BB7_6:
	cvta.to.global.u64 	%rd9, %rd3;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f33;

BB7_7:
	ret;
}

	// .globl	TanHDerivative
.visible .entry TanHDerivative(
	.param .u64 TanHDerivative_param_0,
	.param .u64 TanHDerivative_param_1,
	.param .u32 TanHDerivative_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<37>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 TanHDerivative$__cuda_local_var_204316_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [TanHDerivative_param_0];
	ld.param.u64 	%rd3, [TanHDerivative_param_1];
	ld.param.u32 	%r2, [TanHDerivative_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, TanHDerivative$__cuda_local_var_204316_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB8_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f6, [%rd8];
	st.shared.f32 	[%rd1], %f6;

BB8_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB8_7;
	bra.uni 	BB8_3;

BB8_3:
	ld.shared.f32 	%f1, [%rd1];
	abs.ftz.f32 	%f2, %f1;
	setp.ltu.ftz.f32	%p3, %f2, 0f3F0CCCCD;
	@%p3 bra 	BB8_5;
	bra.uni 	BB8_4;

BB8_5:
	mul.ftz.f32 	%f22, %f1, %f1;
	mov.f32 	%f23, 0fBD57BE66;
	mov.f32 	%f24, 0f3C86A81B;
	fma.rn.ftz.f32 	%f25, %f24, %f22, %f23;
	mov.f32 	%f26, 0f3E08677B;
	fma.rn.ftz.f32 	%f27, %f25, %f22, %f26;
	mov.f32 	%f28, 0fBEAAAA29;
	fma.rn.ftz.f32 	%f29, %f27, %f22, %f28;
	mul.ftz.f32 	%f30, %f22, %f29;
	fma.rn.ftz.f32 	%f31, %f30, %f1, %f1;
	add.ftz.f32 	%f32, %f1, %f1;
	setp.eq.ftz.f32	%p5, %f1, 0f00000000;
	selp.f32	%f36, %f32, %f31, %p5;
	bra.uni 	BB8_6;

BB8_4:
	add.ftz.f32 	%f11, %f2, %f2;
	mul.ftz.f32 	%f12, %f11, 0f3FB8AA3B;
	cvt.rzi.ftz.f32.f32	%f13, %f12;
	mov.f32 	%f14, 0fBF317200;
	fma.rn.ftz.f32 	%f15, %f13, %f14, %f11;
	mov.f32 	%f16, 0fB5BFBE8E;
	fma.rn.ftz.f32 	%f17, %f13, %f16, %f15;
	mul.ftz.f32 	%f8, %f17, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f7,%f8;
	// inline asm
	ex2.approx.ftz.f32 	%f18, %f13;
	mov.f32 	%f19, 0f3F800000;
	fma.rn.ftz.f32 	%f10, %f7, %f18, %f19;
	// inline asm
	rcp.approx.ftz.f32 %f9,%f10;
	// inline asm
	mov.f32 	%f20, 0fC0000000;
	fma.rn.ftz.f32 	%f21, %f9, %f20, %f19;
	mov.b32 	 %r6, %f21;
	setp.ltu.ftz.f32	%p4, %f2, 0f42B00000;
	selp.b32	%r7, %r6, 1065353216, %p4;
	mov.b32 	 %r8, %f1;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f36, %r10;

BB8_6:
	cvta.to.global.u64 	%rd9, %rd3;
	mul.ftz.f32 	%f33, %f36, %f36;
	mov.f32 	%f34, 0f3F800000;
	sub.ftz.f32 	%f35, %f34, %f33;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f35;

BB8_7:
	ret;
}

	// .globl	Sigmoid
.visible .entry Sigmoid(
	.param .u64 Sigmoid_param_0,
	.param .u64 Sigmoid_param_1,
	.param .u32 Sigmoid_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<7>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 Sigmoid$__cuda_local_var_204331_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [Sigmoid_param_0];
	ld.param.u64 	%rd3, [Sigmoid_param_1];
	ld.param.u32 	%r2, [Sigmoid_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, Sigmoid$__cuda_local_var_204331_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB9_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB9_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB9_4;
	bra.uni 	BB9_3;

BB9_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	mul.ftz.f32 	%f3, %f2, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f4, %f3;
	add.ftz.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.ftz.f32 	%f6, %f5;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f6;

BB9_4:
	ret;
}

	// .globl	SigmoidDerivative
.visible .entry SigmoidDerivative(
	.param .u64 SigmoidDerivative_param_0,
	.param .u64 SigmoidDerivative_param_1,
	.param .u32 SigmoidDerivative_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 SigmoidDerivative$__cuda_local_var_204346_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [SigmoidDerivative_param_0];
	ld.param.u64 	%rd3, [SigmoidDerivative_param_1];
	ld.param.u32 	%r2, [SigmoidDerivative_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, SigmoidDerivative$__cuda_local_var_204346_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB10_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB10_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB10_4;
	bra.uni 	BB10_3;

BB10_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	mul.ftz.f32 	%f3, %f2, 0fBFB8AA3B;
	ex2.approx.ftz.f32 	%f4, %f3;
	add.ftz.f32 	%f5, %f4, 0f3F800000;
	rcp.approx.ftz.f32 	%f6, %f5;
	mov.f32 	%f7, 0f3F800000;
	sub.ftz.f32 	%f8, %f7, %f6;
	mul.ftz.f32 	%f9, %f6, %f8;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f9;

BB10_4:
	ret;
}

	// .globl	RELU
.visible .entry RELU(
	.param .u64 RELU_param_0,
	.param .u64 RELU_param_1,
	.param .u32 RELU_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 RELU$__cuda_local_var_204363_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [RELU_param_0];
	ld.param.u64 	%rd3, [RELU_param_1];
	ld.param.u32 	%r2, [RELU_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, RELU$__cuda_local_var_204363_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB11_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB11_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB11_4;
	bra.uni 	BB11_3;

BB11_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	setp.gtu.ftz.f32	%p3, %f2, 0f00000000;
	selp.f32	%f3, %f2, 0f00000000, %p3;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f3;

BB11_4:
	ret;
}

	// .globl	RELUDerivative
.visible .entry RELUDerivative(
	.param .u64 RELUDerivative_param_0,
	.param .u64 RELUDerivative_param_1,
	.param .u32 RELUDerivative_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 RELUDerivative$__cuda_local_var_204380_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [RELUDerivative_param_0];
	ld.param.u64 	%rd3, [RELUDerivative_param_1];
	ld.param.u32 	%r2, [RELUDerivative_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, RELUDerivative$__cuda_local_var_204380_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB12_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB12_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB12_4;
	bra.uni 	BB12_3;

BB12_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	setp.gtu.ftz.f32	%p3, %f2, 0f00000000;
	selp.f32	%f3, 0f3F800000, 0f00000000, %p3;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f3;

BB12_4:
	ret;
}

	// .globl	LeakyRELU
.visible .entry LeakyRELU(
	.param .u64 LeakyRELU_param_0,
	.param .u64 LeakyRELU_param_1,
	.param .u32 LeakyRELU_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 LeakyRELU$__cuda_local_var_204397_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [LeakyRELU_param_0];
	ld.param.u64 	%rd3, [LeakyRELU_param_1];
	ld.param.u32 	%r2, [LeakyRELU_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, LeakyRELU$__cuda_local_var_204397_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB13_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB13_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB13_4;
	bra.uni 	BB13_3;

BB13_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	setp.gtu.ftz.f32	%p3, %f2, 0f00000000;
	mul.ftz.f32 	%f3, %f2, 0f3C23D70A;
	selp.f32	%f4, %f2, %f3, %p3;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f4;

BB13_4:
	ret;
}

	// .globl	LeakyRELUDerivative
.visible .entry LeakyRELUDerivative(
	.param .u64 LeakyRELUDerivative_param_0,
	.param .u64 LeakyRELUDerivative_param_1,
	.param .u32 LeakyRELUDerivative_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 LeakyRELUDerivative$__cuda_local_var_204414_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [LeakyRELUDerivative_param_0];
	ld.param.u64 	%rd3, [LeakyRELUDerivative_param_1];
	ld.param.u32 	%r2, [LeakyRELUDerivative_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, LeakyRELUDerivative$__cuda_local_var_204414_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB14_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB14_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB14_4;
	bra.uni 	BB14_3;

BB14_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	setp.gtu.ftz.f32	%p3, %f2, 0f00000000;
	selp.f32	%f3, 0f3F800000, 0f3C23D70A, %p3;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f3;

BB14_4:
	ret;
}

	// .globl	Reverse
.visible .entry Reverse(
	.param .u64 Reverse_param_0,
	.param .u64 Reverse_param_1,
	.param .u32 Reverse_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<12>;
	// demoted variable
	.shared .align 4 .b8 Reverse$__cuda_local_var_204431_32_non_const_blockA[1024];

	ld.param.u64 	%rd2, [Reverse_param_0];
	ld.param.u64 	%rd3, [Reverse_param_1];
	ld.param.u32 	%r2, [Reverse_param_2];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	mul.wide.s32 	%rd4, %r5, 4;
	mov.u64 	%rd5, Reverse$__cuda_local_var_204431_32_non_const_blockA;
	add.s64 	%rd1, %rd5, %rd4;
	setp.ge.s32	%p2, %r1, %r2;
	@%p2 bra 	BB15_2;

	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	st.shared.f32 	[%rd1], %f1;

BB15_2:
	setp.lt.s32	%p1, %r1, %r2;
	bar.sync 	0;
	@!%p1 bra 	BB15_4;
	bra.uni 	BB15_3;

BB15_3:
	cvta.to.global.u64 	%rd9, %rd3;
	ld.shared.f32 	%f2, [%rd1];
	add.s32 	%r6, %r2, -1;
	sub.s32 	%r7, %r6, %r1;
	mul.wide.s32 	%rd10, %r7, 4;
	add.s64 	%rd11, %rd9, %rd10;
	st.global.f32 	[%rd11], %f2;

BB15_4:
	ret;
}

	// .globl	SumRows
.visible .entry SumRows(
	.param .u64 SumRows_param_0,
	.param .u64 SumRows_param_1,
	.param .u32 SumRows_param_2,
	.param .u32 SumRows_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd2, [SumRows_param_0];
	ld.param.u64 	%rd3, [SumRows_param_1];
	ld.param.u32 	%r4, [SumRows_param_2];
	ld.param.u32 	%r5, [SumRows_param_3];
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB16_4;

	cvta.to.global.u64 	%rd1, %rd2;
	mov.f32 	%f8, 0f00000000;
	mov.f32 	%f9, %f8;
	mov.u32 	%r11, 0;
	setp.lt.s32	%p2, %r5, 1;
	@%p2 bra 	BB16_3;

BB16_2:
	mad.lo.s32 	%r10, %r11, %r4, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd1, %rd4;
	ld.global.f32 	%f6, [%rd5];
	add.ftz.f32 	%f9, %f9, %f6;
	add.s32 	%r11, %r11, 1;
	setp.lt.s32	%p3, %r11, %r5;
	mov.f32 	%f8, %f9;
	@%p3 bra 	BB16_2;

BB16_3:
	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f8;

BB16_4:
	ret;
}

	// .globl	SumColumns
.visible .entry SumColumns(
	.param .u64 SumColumns_param_0,
	.param .u64 SumColumns_param_1,
	.param .u32 SumColumns_param_2,
	.param .u32 SumColumns_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd4, [SumColumns_param_0];
	ld.param.u64 	%rd5, [SumColumns_param_1];
	ld.param.u32 	%r7, [SumColumns_param_2];
	ld.param.u32 	%r8, [SumColumns_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r8;
	@%p1 bra 	BB17_5;

	mov.f32 	%f7, 0f00000000;
	setp.lt.s32	%p2, %r7, 1;
	@%p2 bra 	BB17_4;

	cvta.to.global.u64 	%rd6, %rd4;
	mul.lo.s32 	%r11, %r7, %r4;
	mul.wide.s32 	%rd7, %r11, 4;
	add.s64 	%rd11, %rd6, %rd7;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r12, 0;

BB17_3:
	ld.global.f32 	%f6, [%rd11];
	add.ftz.f32 	%f7, %f7, %f6;
	add.s64 	%rd11, %rd11, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p3, %r12, %r7;
	@%p3 bra 	BB17_3;

BB17_4:
	cvta.to.global.u64 	%rd8, %rd5;
	mul.wide.s32 	%rd9, %r4, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f7;

BB17_5:
	ret;
}

	// .globl	MemClear
.visible .entry MemClear(
	.param .u64 MemClear_param_0,
	.param .u32 MemClear_param_1,
	.param .u32 MemClear_param_2,
	.param .u32 MemClear_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [MemClear_param_0];
	ld.param.u32 	%r4, [MemClear_param_1];
	ld.param.u32 	%r2, [MemClear_param_2];
	ld.param.u32 	%r3, [MemClear_param_3];
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB18_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mad.lo.s32 	%r8, %r1, %r3, %r2;
	mul.wide.s32 	%rd3, %r8, 4;
	add.s64 	%rd4, %rd2, %rd3;
	mov.u32 	%r9, 0;
	st.global.u32 	[%rd4], %r9;

BB18_2:
	ret;
}

	// .globl	FindMinAndMax
.visible .entry FindMinAndMax(
	.param .u64 FindMinAndMax_param_0,
	.param .u32 FindMinAndMax_param_1,
	.param .u64 FindMinAndMax_param_2,
	.param .u64 FindMinAndMax_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<22>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<19>;
	// demoted variable
	.shared .align 4 .b8 FindMinAndMax$__cuda_local_var_204482_32_non_const_block[1024];

	ld.param.u64 	%rd3, [FindMinAndMax_param_0];
	ld.param.u32 	%r7, [FindMinAndMax_param_1];
	ld.param.u64 	%rd4, [FindMinAndMax_param_2];
	ld.param.u64 	%rd5, [FindMinAndMax_param_3];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r8, %r1, %r2;
	mov.f32 	%f15, 0f00000000;
	setp.ge.s32	%p1, %r3, %r7;
	@%p1 bra 	BB19_2;

	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f15, [%rd8];

BB19_2:
	mul.wide.s32 	%rd9, %r2, 4;
	mov.u64 	%rd18, FindMinAndMax$__cuda_local_var_204482_32_non_const_block;
	add.s64 	%rd11, %rd18, %rd9;
	st.shared.f32 	[%rd11], %f15;
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB19_6;

	sub.s32 	%r10, %r7, %r3;
	mov.u32 	%r11, 256;
	min.s32 	%r4, %r10, %r11;
	mov.f32 	%f20, 0f7F7FFFFF;
	mov.f32 	%f17, 0f00800000;
	mov.f32 	%f21, %f20;
	mov.f32 	%f18, %f17;
	mov.u32 	%r12, 0;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB19_5;

BB19_4:
	ld.shared.f32 	%f14, [%rd18];
	setp.gt.ftz.f32	%p4, %f14, %f18;
	selp.f32	%f18, %f14, %f18, %p4;
	setp.lt.ftz.f32	%p5, %f14, %f21;
	selp.f32	%f21, %f14, %f21, %p5;
	add.s64 	%rd18, %rd18, 4;
	add.s32 	%r12, %r12, 1;
	setp.lt.s32	%p6, %r12, %r4;
	mov.f32 	%f17, %f18;
	mov.f32 	%f20, %f21;
	@%p6 bra 	BB19_4;

BB19_5:
	cvta.to.global.u64 	%rd13, %rd5;
	cvta.to.global.u64 	%rd14, %rd4;
	mul.wide.s32 	%rd15, %r1, 4;
	add.s64 	%rd16, %rd14, %rd15;
	st.global.f32 	[%rd16], %f20;
	add.s64 	%rd17, %rd13, %rd15;
	st.global.f32 	[%rd17], %f17;

BB19_6:
	ret;
}

	// .globl	FindSum
.visible .entry FindSum(
	.param .u64 FindSum_param_0,
	.param .u32 FindSum_param_1,
	.param .u64 FindSum_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<11>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<16>;
	// demoted variable
	.shared .align 4 .b8 FindSum$__cuda_local_var_204511_32_non_const_block[1024];

	ld.param.u64 	%rd3, [FindSum_param_0];
	ld.param.u32 	%r7, [FindSum_param_1];
	ld.param.u64 	%rd4, [FindSum_param_2];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r8, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r7;
	@%p1 bra 	BB20_2;

	cvta.to.global.u64 	%rd5, %rd3;
	mul.wide.s32 	%rd6, %r3, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f4, [%rd7];
	mul.wide.s32 	%rd8, %r2, 4;
	mov.u64 	%rd9, FindSum$__cuda_local_var_204511_32_non_const_block;
	add.s64 	%rd10, %rd9, %rd8;
	st.shared.f32 	[%rd10], %f4;

BB20_2:
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB20_6;

	shl.b32 	%r10, %r1, 8;
	sub.s32 	%r11, %r7, %r10;
	mov.u32 	%r12, 256;
	min.s32 	%r4, %r11, %r12;
	mov.f32 	%f9, 0f00000000;
	mov.f32 	%f10, %f9;
	mov.u32 	%r13, 0;
	mov.u64 	%rd15, FindSum$__cuda_local_var_204511_32_non_const_block;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB20_5;

BB20_4:
	ld.shared.f32 	%f7, [%rd15];
	add.ftz.f32 	%f10, %f10, %f7;
	add.s64 	%rd15, %rd15, 4;
	add.s32 	%r13, %r13, 1;
	setp.lt.s32	%p4, %r13, %r4;
	mov.f32 	%f9, %f10;
	@%p4 bra 	BB20_4;

BB20_5:
	cvta.to.global.u64 	%rd12, %rd4;
	mul.wide.s32 	%rd13, %r1, 4;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f32 	[%rd14], %f9;

BB20_6:
	ret;
}

	// .globl	FindStdDev
.visible .entry FindStdDev(
	.param .u64 FindStdDev_param_0,
	.param .u32 FindStdDev_param_1,
	.param .f32 FindStdDev_param_2,
	.param .u64 FindStdDev_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<13>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<16>;
	// demoted variable
	.shared .align 4 .b8 FindStdDev$__cuda_local_var_204536_32_non_const_block[1024];

	ld.param.u64 	%rd3, [FindStdDev_param_0];
	ld.param.u32 	%r7, [FindStdDev_param_1];
	ld.param.f32 	%f4, [FindStdDev_param_2];
	ld.param.u64 	%rd4, [FindStdDev_param_3];
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r8, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r7;
	@%p1 bra 	BB21_2;

	cvta.to.global.u64 	%rd5, %rd3;
	mul.wide.s32 	%rd6, %r3, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f5, [%rd7];
	mul.wide.s32 	%rd8, %r2, 4;
	mov.u64 	%rd9, FindStdDev$__cuda_local_var_204536_32_non_const_block;
	add.s64 	%rd10, %rd9, %rd8;
	st.shared.f32 	[%rd10], %f5;

BB21_2:
	bar.sync 	0;
	setp.ne.s32	%p2, %r2, 0;
	@%p2 bra 	BB21_6;

	shl.b32 	%r10, %r1, 8;
	sub.s32 	%r11, %r7, %r10;
	mov.u32 	%r12, 256;
	min.s32 	%r4, %r11, %r12;
	mov.f32 	%f11, 0f00000000;
	mov.f32 	%f12, %f11;
	mov.u32 	%r13, 0;
	mov.u64 	%rd15, FindStdDev$__cuda_local_var_204536_32_non_const_block;
	setp.lt.s32	%p3, %r4, 1;
	@%p3 bra 	BB21_5;

BB21_4:
	ld.shared.f32 	%f8, [%rd15];
	sub.ftz.f32 	%f9, %f8, %f4;
	fma.rn.ftz.f32 	%f12, %f9, %f9, %f12;
	add.s64 	%rd15, %rd15, 4;
	add.s32 	%r13, %r13, 1;
	setp.lt.s32	%p4, %r13, %r4;
	mov.f32 	%f11, %f12;
	@%p4 bra 	BB21_4;

BB21_5:
	cvta.to.global.u64 	%rd12, %rd4;
	mul.wide.s32 	%rd13, %r1, 4;
	add.s64 	%rd14, %rd12, %rd13;
	st.global.f32 	[%rd14], %f11;

BB21_6:
	ret;
}

	// .globl	Constrain
.visible .entry Constrain(
	.param .u64 Constrain_param_0,
	.param .u32 Constrain_param_1,
	.param .f32 Constrain_param_2,
	.param .f32 Constrain_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [Constrain_param_0];
	ld.param.u32 	%r2, [Constrain_param_1];
	ld.param.f32 	%f2, [Constrain_param_2];
	ld.param.f32 	%f3, [Constrain_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB22_5;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd1, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd1];
	setp.geu.ftz.f32	%p2, %f1, %f2;
	@%p2 bra 	BB22_3;

	st.global.f32 	[%rd1], %f2;

BB22_3:
	setp.leu.ftz.f32	%p3, %f1, %f3;
	@%p3 bra 	BB22_5;

	st.global.f32 	[%rd1], %f3;

BB22_5:
	ret;
}

	// .globl	Pow
.visible .entry Pow(
	.param .u64 Pow_param_0,
	.param .u64 Pow_param_1,
	.param .u32 Pow_param_2,
	.param .f32 Pow_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Pow_param_0];
	ld.param.u64 	%rd2, [Pow_param_1];
	ld.param.u32 	%r2, [Pow_param_2];
	ld.param.f32 	%f1, [Pow_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB23_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	lg2.approx.ftz.f32 	%f3, %f2;
	mul.ftz.f32 	%f4, %f3, %f1;
	ex2.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB23_2:
	ret;
}

	// .globl	Diagonal
.visible .entry Diagonal(
	.param .u64 Diagonal_param_0,
	.param .u64 Diagonal_param_1,
	.param .u32 Diagonal_param_2,
	.param .u32 Diagonal_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [Diagonal_param_0];
	ld.param.u64 	%rd2, [Diagonal_param_1];
	ld.param.u32 	%r2, [Diagonal_param_2];
	ld.param.u32 	%r3, [Diagonal_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.lt.s32	%p1, %r1, %r2;
	setp.lt.s32	%p2, %r1, %r3;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB24_2;
	bra.uni 	BB24_1;

BB24_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r7, %r1, %r2, %r1;
	mul.wide.s32 	%rd4, %r7, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB24_2:
	ret;
}

	// .globl	L1Regularisation
.visible .entry L1Regularisation(
	.param .u64 L1Regularisation_param_0,
	.param .u32 L1Regularisation_param_1,
	.param .f32 L1Regularisation_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<9>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd2, [L1Regularisation_param_0];
	ld.param.u32 	%r2, [L1Regularisation_param_1];
	ld.param.f32 	%f4, [L1Regularisation_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB25_4;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd1, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd1];
	setp.gt.ftz.f32	%p2, %f1, 0f00000000;
	mov.f32 	%f8, 0f3F800000;
	@%p2 bra 	BB25_3;

	setp.lt.ftz.f32	%p3, %f1, 0f00000000;
	selp.s32	%r6, -1, 0, %p3;
	cvt.rn.f32.s32	%f8, %r6;

BB25_3:
	mul.ftz.f32 	%f6, %f8, %f4;
	sub.ftz.f32 	%f7, %f1, %f6;
	st.global.f32 	[%rd1], %f7;

BB25_4:
	ret;
}

	// .globl	PointwiseDivideRows
.visible .entry PointwiseDivideRows(
	.param .u64 PointwiseDivideRows_param_0,
	.param .u64 PointwiseDivideRows_param_1,
	.param .u32 PointwiseDivideRows_param_2,
	.param .u32 PointwiseDivideRows_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [PointwiseDivideRows_param_0];
	ld.param.u64 	%rd2, [PointwiseDivideRows_param_1];
	ld.param.u32 	%r3, [PointwiseDivideRows_param_2];
	ld.param.u32 	%r4, [PointwiseDivideRows_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB26_2;
	bra.uni 	BB26_1;

BB26_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd5], %f3;

BB26_2:
	ret;
}

	// .globl	PointwiseDivideColumns
.visible .entry PointwiseDivideColumns(
	.param .u64 PointwiseDivideColumns_param_0,
	.param .u64 PointwiseDivideColumns_param_1,
	.param .u32 PointwiseDivideColumns_param_2,
	.param .u32 PointwiseDivideColumns_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [PointwiseDivideColumns_param_0];
	ld.param.u64 	%rd2, [PointwiseDivideColumns_param_1];
	ld.param.u32 	%r3, [PointwiseDivideColumns_param_2];
	ld.param.u32 	%r4, [PointwiseDivideColumns_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB27_2;
	bra.uni 	BB27_1;

BB27_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r2, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd5];
	div.approx.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd5], %f3;

BB27_2:
	ret;
}

	// .globl	SplitRows
.visible .entry SplitRows(
	.param .u64 SplitRows_param_0,
	.param .u64 SplitRows_param_1,
	.param .u64 SplitRows_param_2,
	.param .u32 SplitRows_param_3,
	.param .u32 SplitRows_param_4,
	.param .u32 SplitRows_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd2, [SplitRows_param_0];
	ld.param.u64 	%rd3, [SplitRows_param_1];
	ld.param.u64 	%rd4, [SplitRows_param_2];
	ld.param.u32 	%r3, [SplitRows_param_3];
	ld.param.u32 	%r5, [SplitRows_param_4];
	ld.param.u32 	%r4, [SplitRows_param_5];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r2, %r9, %r10, %r11;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB28_4;
	bra.uni 	BB28_1;

BB28_1:
	cvta.to.global.u64 	%rd5, %rd2;
	mad.lo.s32 	%r12, %r2, %r3, %r1;
	cvt.s64.s32	%rd1, %r12;
	mul.wide.s32 	%rd6, %r12, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f1, [%rd7];
	setp.lt.s32	%p4, %r2, %r4;
	@%p4 bra 	BB28_3;
	bra.uni 	BB28_2;

BB28_3:
	cvta.to.global.u64 	%rd11, %rd3;
	shl.b64 	%rd12, %rd1, 2;
	add.s64 	%rd13, %rd11, %rd12;
	st.global.f32 	[%rd13], %f1;
	bra.uni 	BB28_4;

BB28_2:
	cvta.to.global.u64 	%rd8, %rd4;
	sub.s32 	%r13, %r2, %r4;
	mad.lo.s32 	%r14, %r13, %r3, %r1;
	mul.wide.s32 	%rd9, %r14, 4;
	add.s64 	%rd10, %rd8, %rd9;
	st.global.f32 	[%rd10], %f1;

BB28_4:
	ret;
}

	// .globl	SplitColumns
.visible .entry SplitColumns(
	.param .u64 SplitColumns_param_0,
	.param .u64 SplitColumns_param_1,
	.param .u64 SplitColumns_param_2,
	.param .u32 SplitColumns_param_3,
	.param .u32 SplitColumns_param_4,
	.param .u32 SplitColumns_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [SplitColumns_param_0];
	ld.param.u64 	%rd2, [SplitColumns_param_1];
	ld.param.u64 	%rd3, [SplitColumns_param_2];
	ld.param.u32 	%r3, [SplitColumns_param_3];
	ld.param.u32 	%r5, [SplitColumns_param_4];
	ld.param.u32 	%r4, [SplitColumns_param_5];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %tid.y;
	mad.lo.s32 	%r2, %r9, %r10, %r11;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r5;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB29_4;
	bra.uni 	BB29_1;

BB29_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mad.lo.s32 	%r12, %r2, %r3, %r1;
	mul.wide.s32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.f32 	%f1, [%rd6];
	setp.lt.s32	%p4, %r1, %r4;
	@%p4 bra 	BB29_3;
	bra.uni 	BB29_2;

BB29_3:
	cvta.to.global.u64 	%rd10, %rd2;
	mad.lo.s32 	%r16, %r2, %r4, %r1;
	mul.wide.s32 	%rd11, %r16, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;
	bra.uni 	BB29_4;

BB29_2:
	cvta.to.global.u64 	%rd7, %rd3;
	sub.s32 	%r13, %r1, %r4;
	sub.s32 	%r14, %r3, %r4;
	mad.lo.s32 	%r15, %r2, %r14, %r13;
	mul.wide.s32 	%rd8, %r15, 4;
	add.s64 	%rd9, %rd7, %rd8;
	st.global.f32 	[%rd9], %f1;

BB29_4:
	ret;
}

	// .globl	ConcatColumns
.visible .entry ConcatColumns(
	.param .u64 ConcatColumns_param_0,
	.param .u64 ConcatColumns_param_1,
	.param .u64 ConcatColumns_param_2,
	.param .u32 ConcatColumns_param_3,
	.param .u32 ConcatColumns_param_4,
	.param .u32 ConcatColumns_param_5,
	.param .u32 ConcatColumns_param_6
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd4, [ConcatColumns_param_0];
	ld.param.u64 	%rd5, [ConcatColumns_param_1];
	ld.param.u64 	%rd6, [ConcatColumns_param_2];
	ld.param.u32 	%r3, [ConcatColumns_param_3];
	ld.param.u32 	%r6, [ConcatColumns_param_4];
	ld.param.u32 	%r4, [ConcatColumns_param_5];
	ld.param.u32 	%r5, [ConcatColumns_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB30_5;
	bra.uni 	BB30_1;

BB30_1:
	setp.lt.s32	%p4, %r1, %r4;
	@%p4 bra 	BB30_3;
	bra.uni 	BB30_2;

BB30_3:
	cvta.to.global.u64 	%rd9, %rd4;
	mad.lo.s32 	%r15, %r2, %r4, %r1;
	mul.wide.s32 	%rd10, %r15, 4;
	add.s64 	%rd14, %rd9, %rd10;
	bra.uni 	BB30_4;

BB30_2:
	cvta.to.global.u64 	%rd7, %rd5;
	sub.s32 	%r13, %r1, %r4;
	mad.lo.s32 	%r14, %r2, %r5, %r13;
	mul.wide.s32 	%rd8, %r14, 4;
	add.s64 	%rd14, %rd7, %rd8;

BB30_4:
	cvta.to.global.u64 	%rd11, %rd6;
	ld.global.f32 	%f1, [%rd14];
	mad.lo.s32 	%r16, %r2, %r3, %r1;
	mul.wide.s32 	%rd12, %r16, 4;
	add.s64 	%rd13, %rd11, %rd12;
	st.global.f32 	[%rd13], %f1;

BB30_5:
	ret;
}

	// .globl	ConcatRows
.visible .entry ConcatRows(
	.param .u64 ConcatRows_param_0,
	.param .u64 ConcatRows_param_1,
	.param .u64 ConcatRows_param_2,
	.param .u32 ConcatRows_param_3,
	.param .u32 ConcatRows_param_4,
	.param .u32 ConcatRows_param_5
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd4, [ConcatRows_param_0];
	ld.param.u64 	%rd5, [ConcatRows_param_1];
	ld.param.u64 	%rd6, [ConcatRows_param_2];
	ld.param.u32 	%r4, [ConcatRows_param_3];
	ld.param.u32 	%r6, [ConcatRows_param_4];
	ld.param.u32 	%r5, [ConcatRows_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r4;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB31_5;
	bra.uni 	BB31_1;

BB31_1:
	setp.lt.s32	%p4, %r2, %r5;
	mad.lo.s32 	%r3, %r2, %r4, %r1;
	@%p4 bra 	BB31_3;
	bra.uni 	BB31_2;

BB31_3:
	cvta.to.global.u64 	%rd9, %rd4;
	mul.wide.s32 	%rd10, %r3, 4;
	add.s64 	%rd14, %rd9, %rd10;
	bra.uni 	BB31_4;

BB31_2:
	cvta.to.global.u64 	%rd7, %rd5;
	sub.s32 	%r13, %r2, %r5;
	mad.lo.s32 	%r14, %r13, %r4, %r1;
	mul.wide.s32 	%rd8, %r14, 4;
	add.s64 	%rd14, %rd7, %rd8;

BB31_4:
	cvta.to.global.u64 	%rd11, %rd6;
	ld.global.f32 	%f1, [%rd14];
	mul.wide.s32 	%rd12, %r3, 4;
	add.s64 	%rd13, %rd11, %rd12;
	st.global.f32 	[%rd13], %f1;

BB31_5:
	ret;
}

	// .globl	EuclideanDistance
.visible .entry EuclideanDistance(
	.param .u64 EuclideanDistance_param_0,
	.param .u64 EuclideanDistance_param_1,
	.param .u64 EuclideanDistance_param_2,
	.param .u32 EuclideanDistance_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [EuclideanDistance_param_0];
	ld.param.u64 	%rd2, [EuclideanDistance_param_1];
	ld.param.u64 	%rd3, [EuclideanDistance_param_2];
	ld.param.u32 	%r2, [EuclideanDistance_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB32_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f4;

BB32_2:
	ret;
}

	// .globl	MultiEuclideanDistance
.visible .entry MultiEuclideanDistance(
	.param .u64 MultiEuclideanDistance_param_0,
	.param .u64 MultiEuclideanDistance_param_1,
	.param .u64 MultiEuclideanDistance_param_2,
	.param .u32 MultiEuclideanDistance_param_3,
	.param .u32 MultiEuclideanDistance_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd1, [MultiEuclideanDistance_param_0];
	ld.param.u64 	%rd2, [MultiEuclideanDistance_param_1];
	ld.param.u64 	%rd3, [MultiEuclideanDistance_param_2];
	ld.param.u32 	%r3, [MultiEuclideanDistance_param_3];
	ld.param.u32 	%r4, [MultiEuclideanDistance_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB33_2;
	bra.uni 	BB33_1;

BB33_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r2, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	add.s64 	%rd12, %rd11, %rd5;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, %f3;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd13, %rd3;
	mul.wide.s32 	%rd14, %r11, 4;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f4;

BB33_2:
	ret;
}

	// .globl	ManhattanDistance
.visible .entry ManhattanDistance(
	.param .u64 ManhattanDistance_param_0,
	.param .u64 ManhattanDistance_param_1,
	.param .u64 ManhattanDistance_param_2,
	.param .u32 ManhattanDistance_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [ManhattanDistance_param_0];
	ld.param.u64 	%rd2, [ManhattanDistance_param_1];
	ld.param.u64 	%rd3, [ManhattanDistance_param_2];
	ld.param.u32 	%r2, [ManhattanDistance_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB34_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	abs.ftz.f32 	%f4, %f3;
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f4;

BB34_2:
	ret;
}

	// .globl	MultiManhattanDistance
.visible .entry MultiManhattanDistance(
	.param .u64 MultiManhattanDistance_param_0,
	.param .u64 MultiManhattanDistance_param_1,
	.param .u64 MultiManhattanDistance_param_2,
	.param .u32 MultiManhattanDistance_param_3,
	.param .u32 MultiManhattanDistance_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd1, [MultiManhattanDistance_param_0];
	ld.param.u64 	%rd2, [MultiManhattanDistance_param_1];
	ld.param.u64 	%rd3, [MultiManhattanDistance_param_2];
	ld.param.u32 	%r3, [MultiManhattanDistance_param_3];
	ld.param.u32 	%r4, [MultiManhattanDistance_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB35_2;
	bra.uni 	BB35_1;

BB35_1:
	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	mul.wide.s32 	%rd8, %r2, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd10;
	add.s64 	%rd12, %rd11, %rd5;
	ld.global.f32 	%f1, [%rd12];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	abs.ftz.f32 	%f4, %f3;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd13, %rd3;
	mul.wide.s32 	%rd14, %r11, 4;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.f32 	[%rd15], %f4;

BB35_2:
	ret;
}

	// .globl	Abs
.visible .entry Abs(
	.param .u64 Abs_param_0,
	.param .u64 Abs_param_1,
	.param .u32 Abs_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Abs_param_0];
	ld.param.u64 	%rd2, [Abs_param_1];
	ld.param.u32 	%r2, [Abs_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB36_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	abs.ftz.f32 	%f2, %f1;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f2;

BB36_2:
	ret;
}

	// .globl	Log
.visible .entry Log(
	.param .u64 Log_param_0,
	.param .u64 Log_param_1,
	.param .u32 Log_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [Log_param_0];
	ld.param.u64 	%rd2, [Log_param_1];
	ld.param.u32 	%r2, [Log_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB37_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	lg2.approx.ftz.f32 	%f2, %f1;
	mul.ftz.f32 	%f3, %f2, 0f3F317218;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f3;

BB37_2:
	ret;
}

	// .globl	Normalise
.visible .entry Normalise(
	.param .u64 Normalise_param_0,
	.param .u32 Normalise_param_1,
	.param .f32 Normalise_param_2,
	.param .f32 Normalise_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [Normalise_param_0];
	ld.param.u32 	%r2, [Normalise_param_1];
	ld.param.f32 	%f1, [Normalise_param_2];
	ld.param.f32 	%f2, [Normalise_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB38_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f3, [%rd4];
	sub.ftz.f32 	%f4, %f3, %f1;
	div.approx.ftz.f32 	%f5, %f4, %f2;
	st.global.f32 	[%rd4], %f5;

BB38_2:
	ret;
}

	// .globl	SoftmaxVector
.visible .entry SoftmaxVector(
	.param .u64 SoftmaxVector_param_0,
	.param .u64 SoftmaxVector_param_1,
	.param .u32 SoftmaxVector_param_2,
	.param .f32 SoftmaxVector_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd1, [SoftmaxVector_param_0];
	ld.param.u64 	%rd2, [SoftmaxVector_param_1];
	ld.param.u32 	%r2, [SoftmaxVector_param_2];
	ld.param.f32 	%f1, [SoftmaxVector_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB39_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f2, [%rd5];
	sub.ftz.f32 	%f3, %f2, %f1;
	mul.ftz.f32 	%f4, %f3, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f5, %f4;
	cvta.to.global.u64 	%rd6, %rd2;
	add.s64 	%rd7, %rd6, %rd4;
	st.global.f32 	[%rd7], %f5;

BB39_2:
	ret;
}

	// .globl	VectorAdd
.visible .entry VectorAdd(
	.param .u64 VectorAdd_param_0,
	.param .u32 VectorAdd_param_1,
	.param .f32 VectorAdd_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [VectorAdd_param_0];
	ld.param.u32 	%r2, [VectorAdd_param_1];
	ld.param.f32 	%f1, [VectorAdd_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB40_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.f32 	%f2, [%rd4];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd4], %f3;

BB40_2:
	ret;
}

	// .globl	VectorCopyRandom
.visible .entry VectorCopyRandom(
	.param .u64 VectorCopyRandom_param_0,
	.param .u64 VectorCopyRandom_param_1,
	.param .u64 VectorCopyRandom_param_2,
	.param .u32 VectorCopyRandom_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd1, [VectorCopyRandom_param_0];
	ld.param.u64 	%rd2, [VectorCopyRandom_param_1];
	ld.param.u64 	%rd3, [VectorCopyRandom_param_2];
	ld.param.u32 	%r2, [VectorCopyRandom_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB41_2;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.u32 	%r6, [%rd6];
	cvta.to.global.u64 	%rd7, %rd1;
	mul.wide.s32 	%rd8, %r6, 4;
	add.s64 	%rd9, %rd7, %rd8;
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd11, %rd10, %rd5;
	ld.global.f32 	%f1, [%rd11];
	ld.global.f32 	%f2, [%rd9];
	add.ftz.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd11], %f3;

BB41_2:
	ret;
}

	// .globl	CopyToMatrix
.visible .entry CopyToMatrix(
	.param .u64 CopyToMatrix_param_0,
	.param .u64 CopyToMatrix_param_1,
	.param .u32 CopyToMatrix_param_2,
	.param .u32 CopyToMatrix_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [CopyToMatrix_param_0];
	ld.param.u64 	%rd2, [CopyToMatrix_param_1];
	ld.param.u32 	%r3, [CopyToMatrix_param_2];
	ld.param.u32 	%r4, [CopyToMatrix_param_3];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r8, %r9, %r10;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r4;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB42_2;
	bra.uni 	BB42_1;

BB42_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	mul.wide.s32 	%rd8, %r2, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r11, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB42_2:
	ret;
}

	// .globl	VectorSplit
.visible .entry VectorSplit(
	.param .u64 VectorSplit_param_0,
	.param .u64 VectorSplit_param_1,
	.param .u32 VectorSplit_param_2,
	.param .u32 VectorSplit_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [VectorSplit_param_0];
	ld.param.u64 	%rd2, [VectorSplit_param_1];
	ld.param.u32 	%r3, [VectorSplit_param_2];
	ld.param.u32 	%r2, [VectorSplit_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB43_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	div.s32 	%r7, %r1, %r2;
	cvta.to.global.u64 	%rd6, %rd2;
	mul.wide.s32 	%rd7, %r7, 8;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u64 	%rd9, [%rd8];
	cvta.to.global.u64 	%rd10, %rd9;
	rem.s32 	%r8, %r1, %r2;
	mul.wide.s32 	%rd11, %r8, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB43_2:
	ret;
}

	// .globl	TensorConvertToVector
.visible .entry TensorConvertToVector(
	.param .u64 TensorConvertToVector_param_0,
	.param .u64 TensorConvertToVector_param_1,
	.param .u32 TensorConvertToVector_param_2,
	.param .u32 TensorConvertToVector_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [TensorConvertToVector_param_0];
	ld.param.u64 	%rd2, [TensorConvertToVector_param_1];
	ld.param.u32 	%r2, [TensorConvertToVector_param_2];
	ld.param.u32 	%r3, [TensorConvertToVector_param_3];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB44_2;

	cvta.to.global.u64 	%rd3, %rd1;
	div.s32 	%r7, %r1, %r2;
	mul.wide.s32 	%rd4, %r7, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	rem.s32 	%r8, %r1, %r2;
	mul.wide.s32 	%rd8, %r8, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB44_2:
	ret;
}

	// .globl	TensorConvertToMatrix
.visible .entry TensorConvertToMatrix(
	.param .u64 TensorConvertToMatrix_param_0,
	.param .u64 TensorConvertToMatrix_param_1,
	.param .u32 TensorConvertToMatrix_param_2,
	.param .u32 TensorConvertToMatrix_param_3,
	.param .u32 TensorConvertToMatrix_param_4,
	.param .u32 TensorConvertToMatrix_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [TensorConvertToMatrix_param_0];
	ld.param.u64 	%rd2, [TensorConvertToMatrix_param_1];
	ld.param.u32 	%r3, [TensorConvertToMatrix_param_2];
	ld.param.u32 	%r4, [TensorConvertToMatrix_param_3];
	ld.param.u32 	%r5, [TensorConvertToMatrix_param_4];
	ld.param.u32 	%r6, [TensorConvertToMatrix_param_5];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ctaid.y;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r10, %r11, %r12;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r6;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB45_2;
	bra.uni 	BB45_1;

BB45_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r2, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	rem.s32 	%r13, %r1, %r4;
	div.s32 	%r14, %r1, %r4;
	mad.lo.s32 	%r15, %r13, %r3, %r14;
	mul.wide.s32 	%rd8, %r15, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	mad.lo.s32 	%r16, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r16, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB45_2:
	ret;
}

	// .globl	TensorAddPadding
.visible .entry TensorAddPadding(
	.param .u64 TensorAddPadding_param_0,
	.param .u64 TensorAddPadding_param_1,
	.param .u32 TensorAddPadding_param_2,
	.param .u32 TensorAddPadding_param_3,
	.param .u32 TensorAddPadding_param_4,
	.param .u32 TensorAddPadding_param_5,
	.param .u32 TensorAddPadding_param_6,
	.param .u32 TensorAddPadding_param_7
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd9, [TensorAddPadding_param_0];
	ld.param.u64 	%rd10, [TensorAddPadding_param_1];
	ld.param.u32 	%r7, [TensorAddPadding_param_2];
	ld.param.u32 	%r8, [TensorAddPadding_param_4];
	ld.param.u32 	%r11, [TensorAddPadding_param_5];
	ld.param.u32 	%r9, [TensorAddPadding_param_6];
	ld.param.u32 	%r10, [TensorAddPadding_param_7];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r12, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r2, %r10;
	setp.ge.s32	%p2, %r1, %r10;
	and.pred  	%p3, %p1, %p2;
	sub.s32 	%r18, %r8, %r10;
	setp.lt.s32	%p4, %r1, %r18;
	and.pred  	%p5, %p3, %p4;
	sub.s32 	%r19, %r11, %r10;
	setp.lt.s32	%p6, %r2, %r19;
	and.pred  	%p7, %p5, %p6;
	@!%p7 bra 	BB46_4;
	bra.uni 	BB46_1;

BB46_1:
	sub.s32 	%r20, %r2, %r10;
	sub.s32 	%r21, %r1, %r10;
	mad.lo.s32 	%r3, %r20, %r7, %r21;
	mad.lo.s32 	%r4, %r2, %r8, %r1;
	setp.lt.s32	%p8, %r9, 1;
	@%p8 bra 	BB46_4;

	cvta.to.global.u64 	%rd20, %rd10;
	cvta.to.global.u64 	%rd19, %rd9;
	cvt.s64.s32	%rd3, %r3;
	cvt.s64.s32	%rd4, %r4;
	mov.u32 	%r23, 0;
	shl.b64 	%rd13, %rd3, 2;
	shl.b64 	%rd17, %rd4, 2;

BB46_3:
	ld.global.u64 	%rd11, [%rd19];
	cvta.to.global.u64 	%rd12, %rd11;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.f32 	%f1, [%rd14];
	ld.global.u64 	%rd15, [%rd20];
	cvta.to.global.u64 	%rd16, %rd15;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f1;
	add.s64 	%rd20, %rd20, 8;
	add.s64 	%rd19, %rd19, 8;
	add.s32 	%r23, %r23, 1;
	setp.lt.s32	%p9, %r23, %r9;
	@%p9 bra 	BB46_3;

BB46_4:
	ret;
}

	// .globl	TensorRemovePadding
.visible .entry TensorRemovePadding(
	.param .u64 TensorRemovePadding_param_0,
	.param .u64 TensorRemovePadding_param_1,
	.param .u32 TensorRemovePadding_param_2,
	.param .u32 TensorRemovePadding_param_3,
	.param .u32 TensorRemovePadding_param_4,
	.param .u32 TensorRemovePadding_param_5,
	.param .u32 TensorRemovePadding_param_6,
	.param .u32 TensorRemovePadding_param_7
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd9, [TensorRemovePadding_param_0];
	ld.param.u64 	%rd10, [TensorRemovePadding_param_1];
	ld.param.u32 	%r7, [TensorRemovePadding_param_2];
	ld.param.u32 	%r11, [TensorRemovePadding_param_3];
	ld.param.u32 	%r8, [TensorRemovePadding_param_4];
	ld.param.u32 	%r9, [TensorRemovePadding_param_6];
	ld.param.u32 	%r10, [TensorRemovePadding_param_7];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r12, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %tid.y;
	mad.lo.s32 	%r2, %r15, %r16, %r17;
	setp.ge.s32	%p1, %r2, %r10;
	setp.ge.s32	%p2, %r1, %r10;
	and.pred  	%p3, %p1, %p2;
	sub.s32 	%r18, %r7, %r10;
	setp.lt.s32	%p4, %r1, %r18;
	and.pred  	%p5, %p3, %p4;
	sub.s32 	%r19, %r11, %r10;
	setp.lt.s32	%p6, %r2, %r19;
	and.pred  	%p7, %p5, %p6;
	@!%p7 bra 	BB47_4;
	bra.uni 	BB47_1;

BB47_1:
	mad.lo.s32 	%r3, %r2, %r7, %r1;
	sub.s32 	%r20, %r2, %r10;
	sub.s32 	%r21, %r1, %r10;
	mad.lo.s32 	%r4, %r20, %r8, %r21;
	setp.lt.s32	%p8, %r9, 1;
	@%p8 bra 	BB47_4;

	cvta.to.global.u64 	%rd20, %rd10;
	cvta.to.global.u64 	%rd19, %rd9;
	cvt.s64.s32	%rd3, %r3;
	cvt.s64.s32	%rd4, %r4;
	mov.u32 	%r23, 0;
	shl.b64 	%rd13, %rd3, 2;
	shl.b64 	%rd17, %rd4, 2;

BB47_3:
	ld.global.u64 	%rd11, [%rd19];
	cvta.to.global.u64 	%rd12, %rd11;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.f32 	%f1, [%rd14];
	ld.global.u64 	%rd15, [%rd20];
	cvta.to.global.u64 	%rd16, %rd15;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f1;
	add.s64 	%rd20, %rd20, 8;
	add.s64 	%rd19, %rd19, 8;
	add.s32 	%r23, %r23, 1;
	setp.lt.s32	%p9, %r23, %r9;
	@%p9 bra 	BB47_3;

BB47_4:
	ret;
}

	// .globl	TensorIm2Col
.visible .entry TensorIm2Col(
	.param .u64 TensorIm2Col_param_0,
	.param .u64 TensorIm2Col_param_1,
	.param .u32 TensorIm2Col_param_2,
	.param .u32 TensorIm2Col_param_3,
	.param .u32 TensorIm2Col_param_4,
	.param .u32 TensorIm2Col_param_5,
	.param .u32 TensorIm2Col_param_6,
	.param .u32 TensorIm2Col_param_7,
	.param .u32 TensorIm2Col_param_8,
	.param .u32 TensorIm2Col_param_9
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [TensorIm2Col_param_0];
	ld.param.u64 	%rd2, [TensorIm2Col_param_1];
	ld.param.u32 	%r3, [TensorIm2Col_param_2];
	ld.param.u32 	%r4, [TensorIm2Col_param_3];
	ld.param.u32 	%r5, [TensorIm2Col_param_4];
	ld.param.u32 	%r9, [TensorIm2Col_param_5];
	ld.param.u32 	%r6, [TensorIm2Col_param_7];
	ld.param.u32 	%r7, [TensorIm2Col_param_8];
	ld.param.u32 	%r8, [TensorIm2Col_param_9];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	setp.lt.s32	%p1, %r1, %r5;
	setp.lt.s32	%p2, %r2, %r9;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB48_2;
	bra.uni 	BB48_1;

BB48_1:
	cvta.to.global.u64 	%rd3, %rd1;
	mul.lo.s32 	%r16, %r7, %r6;
	div.s32 	%r17, %r2, %r16;
	rem.s32 	%r18, %r2, %r16;
	mul.wide.s32 	%rd4, %r17, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	sub.s32 	%r19, %r4, %r6;
	div.s32 	%r20, %r19, %r8;
	add.s32 	%r21, %r20, 1;
	sub.s32 	%r22, %r3, %r7;
	div.s32 	%r23, %r22, %r8;
	add.s32 	%r24, %r23, 1;
	div.s32 	%r25, %r1, %r21;
	rem.s32 	%r26, %r1, %r24;
	div.s32 	%r27, %r18, %r6;
	mad.lo.s32 	%r28, %r25, %r8, %r27;
	rem.s32 	%r29, %r18, %r7;
	mad.lo.s32 	%r30, %r26, %r8, %r29;
	mad.lo.s32 	%r31, %r28, %r3, %r30;
	mul.wide.s32 	%rd8, %r31, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	mad.lo.s32 	%r32, %r2, %r5, %r1;
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r32, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB48_2:
	ret;
}

	// .globl	SoftmaxDerivative
.visible .entry SoftmaxDerivative(
	.param .u64 SoftmaxDerivative_param_0,
	.param .u64 SoftmaxDerivative_param_1,
	.param .u32 SoftmaxDerivative_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [SoftmaxDerivative_param_0];
	ld.param.u64 	%rd3, [SoftmaxDerivative_param_1];
	ld.param.u32 	%r3, [SoftmaxDerivative_param_2];
	cvta.to.global.u64 	%rd1, %rd4;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r6;
	mov.u32 	%r7, %ctaid.y;
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %tid.y;
	mad.lo.s32 	%r2, %r7, %r8, %r9;
	setp.lt.s32	%p1, %r1, %r3;
	setp.lt.s32	%p2, %r2, %r3;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB49_4;
	bra.uni 	BB49_1;

BB49_1:
	cvta.to.global.u64 	%rd5, %rd3;
	mad.lo.s32 	%r10, %r2, %r3, %r1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.global.f32 	%f1, [%rd7];
	mul.wide.s32 	%rd8, %r10, 4;
	add.s64 	%rd2, %rd5, %rd8;
	setp.eq.s32	%p4, %r1, %r2;
	@%p4 bra 	BB49_3;
	bra.uni 	BB49_2;

BB49_3:
	mov.f32 	%f5, 0f3F800000;
	sub.ftz.f32 	%f6, %f5, %f1;
	mul.ftz.f32 	%f7, %f1, %f6;
	st.global.f32 	[%rd2], %f7;
	bra.uni 	BB49_4;

BB49_2:
	mul.wide.s32 	%rd9, %r2, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.f32 	%f2, [%rd10];
	mul.ftz.f32 	%f3, %f1, %f2;
	neg.ftz.f32 	%f4, %f3;
	st.global.f32 	[%rd2], %f4;

BB49_4:
	ret;
}

	// .globl	Rotate
.visible .entry Rotate(
	.param .u64 Rotate_param_0,
	.param .u64 Rotate_param_1,
	.param .u32 Rotate_param_2,
	.param .u32 Rotate_param_3,
	.param .u32 Rotate_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [Rotate_param_0];
	ld.param.u64 	%rd2, [Rotate_param_1];
	ld.param.u32 	%r4, [Rotate_param_2];
	ld.param.u32 	%r2, [Rotate_param_3];
	ld.param.u32 	%r3, [Rotate_param_4];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB50_2;

	cvta.to.global.u64 	%rd3, %rd1;
	add.s32 	%r8, %r2, -1;
	div.s32 	%r9, %r1, %r2;
	sub.s32 	%r10, %r8, %r9;
	mul.wide.s32 	%rd4, %r10, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	cvta.to.global.u64 	%rd7, %rd6;
	add.s32 	%r11, %r3, -1;
	rem.s32 	%r12, %r1, %r3;
	sub.s32 	%r13, %r11, %r12;
	mul.wide.s32 	%rd8, %r13, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f32 	%f1, [%rd9];
	cvta.to.global.u64 	%rd10, %rd2;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;

BB50_2:
	ret;
}

	// .globl	TensorMaxPool
.visible .entry TensorMaxPool(
	.param .u64 TensorMaxPool_param_0,
	.param .u64 TensorMaxPool_param_1,
	.param .u64 TensorMaxPool_param_2,
	.param .u64 TensorMaxPool_param_3,
	.param .u32 TensorMaxPool_param_4,
	.param .u32 TensorMaxPool_param_5,
	.param .u32 TensorMaxPool_param_6,
	.param .u32 TensorMaxPool_param_7,
	.param .u32 TensorMaxPool_param_8,
	.param .u32 TensorMaxPool_param_9,
	.param .u32 TensorMaxPool_param_10,
	.param .u32 TensorMaxPool_param_11
)
{
	.reg .pred 	%p<15>;
	.reg .f32 	%f<18>;
	.reg .b32 	%r<73>;
	.reg .b64 	%rd<34>;


	ld.param.u64 	%rd13, [TensorMaxPool_param_0];
	ld.param.u64 	%rd14, [TensorMaxPool_param_1];
	ld.param.u64 	%rd15, [TensorMaxPool_param_2];
	ld.param.u64 	%rd16, [TensorMaxPool_param_3];
	ld.param.u32 	%r31, [TensorMaxPool_param_4];
	ld.param.u32 	%r32, [TensorMaxPool_param_6];
	ld.param.u32 	%r33, [TensorMaxPool_param_7];
	ld.param.u32 	%r37, [TensorMaxPool_param_8];
	ld.param.u32 	%r34, [TensorMaxPool_param_9];
	ld.param.u32 	%r35, [TensorMaxPool_param_10];
	ld.param.u32 	%r36, [TensorMaxPool_param_11];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	mov.u32 	%r5, %ctaid.y;
	mov.u32 	%r6, %ntid.y;
	mov.u32 	%r7, %tid.y;
	mad.lo.s32 	%r8, %r5, %r6, %r7;
	setp.lt.s32	%p1, %r4, %r33;
	setp.lt.s32	%p2, %r8, %r37;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB51_13;
	bra.uni 	BB51_1;

BB51_1:
	setp.lt.s32	%p4, %r32, 1;
	@%p4 bra 	BB51_13;

	cvta.to.global.u64 	%rd1, %rd16;
	cvta.to.global.u64 	%rd2, %rd15;
	cvta.to.global.u64 	%rd3, %rd14;
	cvta.to.global.u64 	%rd4, %rd13;
	mad.lo.s32 	%r39, %r8, %r33, %r4;
	mul.lo.s32 	%r9, %r8, %r36;
	cvt.s64.s32	%rd5, %r39;
	mad.lo.s32 	%r42, %r31, %r8, %r4;
	mul.lo.s32 	%r10, %r36, %r42;
	mul.lo.s32 	%r11, %r36, %r4;
	mov.u32 	%r38, 0;
	mov.u32 	%r52, %r38;

BB51_3:
	mul.wide.s32 	%rd17, %r52, 8;
	add.s64 	%rd18, %rd4, %rd17;
	ld.global.u64 	%rd19, [%rd18];
	cvta.to.global.u64 	%rd6, %rd19;
	add.s64 	%rd20, %rd3, %rd17;
	ld.global.u64 	%rd7, [%rd20];
	add.s64 	%rd21, %rd2, %rd17;
	ld.global.u64 	%rd8, [%rd21];
	add.s64 	%rd22, %rd1, %rd17;
	ld.global.u64 	%rd9, [%rd22];
	mov.f32 	%f14, 0f00800000;
	mov.u32 	%r69, -1;
	mov.u32 	%r60, %r69;
	mov.f32 	%f17, %f14;
	mov.u32 	%r72, %r69;
	mov.u32 	%r63, %r69;
	setp.lt.s32	%p5, %r34, 1;
	mov.u32 	%r51, %r38;
	@%p5 bra 	BB51_8;

BB51_4:
	mov.f32 	%f10, %f17;
	mov.f32 	%f16, %f10;
	mov.u32 	%r65, %r72;
	mov.u32 	%r71, %r65;
	mov.u32 	%r56, %r63;
	mov.u32 	%r62, %r56;
	mov.u32 	%r13, %r51;
	setp.lt.s32	%p6, %r35, 1;
	@%p6 bra 	BB51_7;

	mad.lo.s32 	%r49, %r31, %r13, %r10;
	mul.wide.s32 	%rd23, %r49, 4;
	add.s64 	%rd33, %rd6, %rd23;
	add.s32 	%r16, %r13, %r9;
	mov.u32 	%r54, 0;
	mov.u32 	%r53, %r11;
	mov.u32 	%r61, %r62;
	mov.u32 	%r70, %r71;
	mov.f32 	%f15, %f16;

BB51_6:
	mov.u32 	%r17, %r53;
	ld.global.f32 	%f8, [%rd33];
	setp.gt.ftz.f32	%p7, %f8, %f15;
	setp.eq.s32	%p8, %r70, -1;
	or.pred  	%p9, %p7, %p8;
	selp.f32	%f15, %f8, %f15, %p9;
	selp.b32	%r70, %r16, %r70, %p9;
	selp.b32	%r61, %r17, %r61, %p9;
	add.s64 	%rd33, %rd33, 4;
	add.s32 	%r23, %r17, 1;
	add.s32 	%r54, %r54, 1;
	setp.lt.s32	%p10, %r54, %r35;
	mov.u32 	%r53, %r23;
	mov.u32 	%r62, %r61;
	mov.u32 	%r71, %r70;
	mov.f32 	%f16, %f15;
	@%p10 bra 	BB51_6;

BB51_7:
	mov.f32 	%f17, %f16;
	mov.u32 	%r72, %r71;
	mov.u32 	%r63, %r62;
	add.s32 	%r27, %r13, 1;
	setp.lt.s32	%p11, %r27, %r34;
	mov.u32 	%r51, %r27;
	mov.u32 	%r60, %r63;
	mov.u32 	%r69, %r72;
	mov.f32 	%f14, %f17;
	@%p11 bra 	BB51_4;

BB51_8:
	setp.eq.s64	%p12, %rd8, 0;
	@%p12 bra 	BB51_10;

	cvta.to.global.u64 	%rd24, %rd8;
	shl.b64 	%rd25, %rd5, 2;
	add.s64 	%rd26, %rd24, %rd25;
	st.global.u32 	[%rd26], %r69;

BB51_10:
	setp.eq.s64	%p13, %rd9, 0;
	@%p13 bra 	BB51_12;

	cvta.to.global.u64 	%rd27, %rd9;
	shl.b64 	%rd28, %rd5, 2;
	add.s64 	%rd29, %rd27, %rd28;
	st.global.u32 	[%rd29], %r60;

BB51_12:
	cvta.to.global.u64 	%rd30, %rd7;
	shl.b64 	%rd31, %rd5, 2;
	add.s64 	%rd32, %rd30, %rd31;
	st.global.f32 	[%rd32], %f14;
	add.s32 	%r52, %r52, 1;
	setp.lt.s32	%p14, %r52, %r32;
	@%p14 bra 	BB51_3;

BB51_13:
	ret;
}

	// .globl	TensorReverseMaxPool
.visible .entry TensorReverseMaxPool(
	.param .u64 TensorReverseMaxPool_param_0,
	.param .u64 TensorReverseMaxPool_param_1,
	.param .u64 TensorReverseMaxPool_param_2,
	.param .u64 TensorReverseMaxPool_param_3,
	.param .u32 TensorReverseMaxPool_param_4,
	.param .u32 TensorReverseMaxPool_param_5,
	.param .u32 TensorReverseMaxPool_param_6,
	.param .u32 TensorReverseMaxPool_param_7,
	.param .u32 TensorReverseMaxPool_param_8
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<21>;
	.reg .b64 	%rd<36>;


	ld.param.u64 	%rd14, [TensorReverseMaxPool_param_0];
	ld.param.u64 	%rd15, [TensorReverseMaxPool_param_1];
	ld.param.u64 	%rd16, [TensorReverseMaxPool_param_2];
	ld.param.u64 	%rd17, [TensorReverseMaxPool_param_3];
	ld.param.u32 	%r6, [TensorReverseMaxPool_param_4];
	ld.param.u32 	%r9, [TensorReverseMaxPool_param_5];
	ld.param.u32 	%r7, [TensorReverseMaxPool_param_6];
	ld.param.u32 	%r8, [TensorReverseMaxPool_param_7];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r10, %r11, %r12;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	setp.lt.s32	%p1, %r1, %r6;
	setp.lt.s32	%p2, %r2, %r9;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB52_4;
	bra.uni 	BB52_1;

BB52_1:
	mad.lo.s32 	%r3, %r2, %r6, %r1;
	setp.lt.s32	%p4, %r7, 1;
	@%p4 bra 	BB52_4;

	cvta.to.global.u64 	%rd35, %rd17;
	cvta.to.global.u64 	%rd34, %rd16;
	cvta.to.global.u64 	%rd33, %rd15;
	cvta.to.global.u64 	%rd32, %rd14;
	cvt.s64.s32	%rd5, %r3;
	mov.u32 	%r20, 0;
	shl.b64 	%rd26, %rd5, 2;

BB52_3:
	ld.global.u64 	%rd18, [%rd32];
	cvta.to.global.u64 	%rd19, %rd18;
	ld.global.u64 	%rd20, [%rd33];
	cvta.to.global.u64 	%rd21, %rd20;
	ld.global.u64 	%rd22, [%rd34];
	cvta.to.global.u64 	%rd23, %rd22;
	ld.global.u64 	%rd24, [%rd35];
	cvta.to.global.u64 	%rd25, %rd24;
	add.s64 	%rd27, %rd23, %rd26;
	add.s64 	%rd28, %rd25, %rd26;
	add.s64 	%rd29, %rd19, %rd26;
	ld.global.f32 	%f1, [%rd29];
	ld.global.u32 	%r17, [%rd27];
	ld.global.u32 	%r18, [%rd28];
	mad.lo.s32 	%r19, %r17, %r8, %r18;
	mul.wide.s32 	%rd30, %r19, 4;
	add.s64 	%rd31, %rd21, %rd30;
	st.global.f32 	[%rd31], %f1;
	add.s64 	%rd35, %rd35, 8;
	add.s64 	%rd34, %rd34, 8;
	add.s64 	%rd33, %rd33, 8;
	add.s64 	%rd32, %rd32, 8;
	add.s32 	%r20, %r20, 1;
	setp.lt.s32	%p5, %r20, %r7;
	@%p5 bra 	BB52_3;

BB52_4:
	ret;
}

	// .globl	TensorReverseIm2Col
.visible .entry TensorReverseIm2Col(
	.param .u64 TensorReverseIm2Col_param_0,
	.param .u64 TensorReverseIm2Col_param_1,
	.param .u64 TensorReverseIm2Col_param_2,
	.param .u32 TensorReverseIm2Col_param_3,
	.param .u32 TensorReverseIm2Col_param_4,
	.param .u32 TensorReverseIm2Col_param_5,
	.param .u32 TensorReverseIm2Col_param_6,
	.param .u32 TensorReverseIm2Col_param_7,
	.param .u32 TensorReverseIm2Col_param_8,
	.param .u32 TensorReverseIm2Col_param_9,
	.param .u32 TensorReverseIm2Col_param_10,
	.param .u32 TensorReverseIm2Col_param_11
)
{
	.reg .pred 	%p<12>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<43>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd8, [TensorReverseIm2Col_param_0];
	ld.param.u64 	%rd9, [TensorReverseIm2Col_param_1];
	ld.param.u64 	%rd10, [TensorReverseIm2Col_param_2];
	ld.param.u32 	%r16, [TensorReverseIm2Col_param_3];
	ld.param.u32 	%r23, [TensorReverseIm2Col_param_4];
	ld.param.u32 	%r17, [TensorReverseIm2Col_param_5];
	ld.param.u32 	%r18, [TensorReverseIm2Col_param_6];
	ld.param.u32 	%r19, [TensorReverseIm2Col_param_8];
	ld.param.u32 	%r20, [TensorReverseIm2Col_param_9];
	ld.param.u32 	%r21, [TensorReverseIm2Col_param_10];
	ld.param.u32 	%r22, [TensorReverseIm2Col_param_11];
	mov.u32 	%r24, %ctaid.x;
	mov.u32 	%r25, %ntid.x;
	mov.u32 	%r26, %tid.x;
	mad.lo.s32 	%r1, %r24, %r25, %r26;
	mov.u32 	%r27, %ctaid.y;
	mov.u32 	%r28, %ntid.y;
	mov.u32 	%r29, %tid.y;
	mad.lo.s32 	%r2, %r27, %r28, %r29;
	setp.lt.s32	%p1, %r1, %r16;
	setp.lt.s32	%p2, %r2, %r23;
	and.pred  	%p3, %p1, %p2;
	@!%p3 bra 	BB53_12;
	bra.uni 	BB53_1;

BB53_1:
	setp.lt.s32	%p4, %r17, 1;
	@%p4 bra 	BB53_12;

	cvta.to.global.u64 	%rd1, %rd10;
	cvta.to.global.u64 	%rd2, %rd9;
	cvta.to.global.u64 	%rd3, %rd8;
	mul.lo.s32 	%r3, %r2, %r22;
	mul.lo.s32 	%r4, %r1, %r22;
	mad.lo.s32 	%r31, %r1, %r16, %r2;
	cvt.s64.s32	%rd4, %r31;
	mov.u32 	%r30, 0;
	shl.b64 	%rd19, %rd4, 2;
	mov.u32 	%r40, %r30;

BB53_3:
	mul.wide.s32 	%rd11, %r40, 8;
	add.s64 	%rd12, %rd3, %rd11;
	ld.global.u64 	%rd13, [%rd12];
	cvta.to.global.u64 	%rd14, %rd13;
	add.s64 	%rd15, %rd2, %rd11;
	ld.global.u64 	%rd16, [%rd15];
	cvta.to.global.u64 	%rd5, %rd16;
	add.s64 	%rd17, %rd1, %rd11;
	ld.global.u64 	%rd18, [%rd17];
	cvta.to.global.u64 	%rd6, %rd18;
	add.s64 	%rd20, %rd14, %rd19;
	ld.global.f32 	%f1, [%rd20];
	setp.lt.s32	%p5, %r21, 1;
	mov.u32 	%r39, %r30;
	@%p5 bra 	BB53_11;

BB53_4:
	mov.u32 	%r6, %r39;
	setp.lt.s32	%p6, %r20, 1;
	@%p6 bra 	BB53_10;

	add.s32 	%r7, %r6, %r3;
	mul.lo.s32 	%r8, %r6, %r20;
	mov.u32 	%r41, 0;

BB53_6:
	setp.lt.s32	%p7, %r19, 1;
	@%p7 bra 	BB53_9;

	add.s32 	%r35, %r41, %r8;
	cvt.s64.s32	%rd7, %r35;
	add.s32 	%r10, %r41, %r4;
	mov.u32 	%r42, 0;

BB53_8:
	mul.wide.s32 	%rd21, %r42, 8;
	add.s64 	%rd22, %rd5, %rd21;
	ld.global.u64 	%rd23, [%rd22];
	cvta.to.global.u64 	%rd24, %rd23;
	shl.b64 	%rd25, %rd7, 2;
	add.s64 	%rd26, %rd24, %rd25;
	ld.global.f32 	%f2, [%rd26];
	mul.ftz.f32 	%f3, %f1, %f2;
	add.s32 	%r36, %r7, %r42;
	mad.lo.s32 	%r37, %r36, %r18, %r10;
	mul.wide.s32 	%rd27, %r37, 4;
	add.s64 	%rd28, %rd6, %rd27;
	st.global.f32 	[%rd28], %f3;
	add.s32 	%r42, %r42, 1;
	setp.lt.s32	%p8, %r42, %r19;
	@%p8 bra 	BB53_8;

BB53_9:
	add.s32 	%r41, %r41, 1;
	setp.lt.s32	%p9, %r41, %r20;
	@%p9 bra 	BB53_6;

BB53_10:
	add.s32 	%r14, %r6, 1;
	setp.lt.s32	%p10, %r14, %r21;
	mov.u32 	%r39, %r14;
	@%p10 bra 	BB53_4;

BB53_11:
	add.s32 	%r40, %r40, 1;
	setp.lt.s32	%p11, %r40, %r17;
	@%p11 bra 	BB53_3;

BB53_12:
	ret;
}


